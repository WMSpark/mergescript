/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.salesvision.hrdb.SpringSessionAttributes;
import com.salesvision.hrdb.SpringSessionAttributesId;
import com.salesvision.hrdb.service.SpringSessionAttributesService;


/**
 * Controller object for domain model class SpringSessionAttributes.
 * @see SpringSessionAttributes
 */
@RestController("HRDB.SpringSessionAttributesController")
@Api(value = "SpringSessionAttributesController", description = "Exposes APIs to work with SpringSessionAttributes resource.")
@RequestMapping("/HRDB/SpringSessionAttributes")
public class SpringSessionAttributesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringSessionAttributesController.class);

    @Autowired
	@Qualifier("HRDB.SpringSessionAttributesService")
	private SpringSessionAttributesService springSessionAttributesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SpringSessionAttributes instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpringSessionAttributes createSpringSessionAttributes(@RequestPart("wm_data_json") SpringSessionAttributes springSessionAttributes, @RequestPart(value = "attributeBytes", required = false) MultipartFile _attributeBytes) {
		LOGGER.debug("Create SpringSessionAttributes with information: {}" , springSessionAttributes);

    springSessionAttributes.setAttributeBytes(WMMultipartUtils.toByteArray(_attributeBytes));
		springSessionAttributes = springSessionAttributesService.create(springSessionAttributes);
		LOGGER.debug("Created SpringSessionAttributes with information: {}" , springSessionAttributes);

	    return springSessionAttributes;
	}

    @ApiOperation(value = "Returns the SpringSessionAttributes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpringSessionAttributes getSpringSessionAttributes(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId) {

        SpringSessionAttributesId springsessionattributesId = new SpringSessionAttributesId();
        springsessionattributesId.setAttributeName(attributeName);
        springsessionattributesId.setSessionPrimaryId(sessionPrimaryId);

        LOGGER.debug("Getting SpringSessionAttributes with id: {}" , springsessionattributesId);
        SpringSessionAttributes springSessionAttributes = springSessionAttributesService.getById(springsessionattributesId);
        LOGGER.debug("SpringSessionAttributes details with id: {}" , springSessionAttributes);

        return springSessionAttributes;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in SpringSessionAttributes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getSpringSessionAttributesBLOBContent(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in SpringSessionAttributes instance" , fieldName);

        if(!WMRuntimeUtils.isLob(SpringSessionAttributes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        SpringSessionAttributesId springsessionattributesId = new SpringSessionAttributesId();
        springsessionattributesId.setAttributeName(attributeName);
        springsessionattributesId.setSessionPrimaryId(sessionPrimaryId);

        SpringSessionAttributes springSessionAttributes = springSessionAttributesService.getById(springsessionattributesId);
        WMMultipartUtils.buildHttpResponseForBlob(springSessionAttributes, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the SpringSessionAttributes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpringSessionAttributes editSpringSessionAttributes(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId, @RequestBody SpringSessionAttributes springSessionAttributes) {

        springSessionAttributes.setAttributeName(attributeName);
        springSessionAttributes.setSessionPrimaryId(sessionPrimaryId);

        LOGGER.debug("SpringSessionAttributes details with id is updated with: {}" , springSessionAttributes);

        return springSessionAttributesService.update(springSessionAttributes);
    }

	@ApiOperation(value = "Partially updates the  SpringSessionAttributes instance associated with the given composite-id.")
	@RequestMapping(value = "/composite-id", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpringSessionAttributes patchSpringSessionAttributes(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId, @RequestBody @MapTo(SpringSessionAttributes.class) Map<String, Object> springSessionAttributesPatch) {

        SpringSessionAttributesId springsessionattributesId = new SpringSessionAttributesId();
        springsessionattributesId.setAttributeName(attributeName);
        springsessionattributesId.setSessionPrimaryId(sessionPrimaryId);
        LOGGER.debug("Partially updating SpringSessionAttributes with id: {}" , springsessionattributesId);

        SpringSessionAttributes springSessionAttributes = springSessionAttributesService.partialUpdate(springsessionattributesId, springSessionAttributesPatch);
        LOGGER.debug("SpringSessionAttributes details after partial update: {}" , springSessionAttributes);

        return springSessionAttributes;
    }

    @ApiOperation(value = "Updates the SpringSessionAttributes instance associated with the given composite-id.This API should be used when SpringSessionAttributes instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpringSessionAttributes editSpringSessionAttributes(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editSpringSessionAttributesAndMultiparts(attributeName, sessionPrimaryId, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the SpringSessionAttributes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SpringSessionAttributes editSpringSessionAttributesAndMultiparts(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId, MultipartHttpServletRequest multipartHttpServletRequest) { 

        SpringSessionAttributesId springsessionattributesId = new SpringSessionAttributesId();
        springsessionattributesId.setAttributeName(attributeName);
        springsessionattributesId.setSessionPrimaryId(sessionPrimaryId);

        SpringSessionAttributes newSpringSessionAttributes = WMMultipartUtils.toObject(multipartHttpServletRequest, SpringSessionAttributes.class, "HRDB");
        SpringSessionAttributes oldSpringSessionAttributes = springSessionAttributesService.getById(springsessionattributesId);

        WMMultipartUtils.updateLobsContent(oldSpringSessionAttributes, newSpringSessionAttributes);

        newSpringSessionAttributes.setAttributeName(attributeName);
        newSpringSessionAttributes.setSessionPrimaryId(sessionPrimaryId);

        LOGGER.debug("SpringSessionAttributes details with id is updated with: {}" , newSpringSessionAttributes);

        return springSessionAttributesService.update(newSpringSessionAttributes);
    }


    @ApiOperation(value = "Deletes the SpringSessionAttributes instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSpringSessionAttributes(@RequestParam("attributeName") String attributeName, @RequestParam("sessionPrimaryId") String sessionPrimaryId) {

        SpringSessionAttributesId springsessionattributesId = new SpringSessionAttributesId();
        springsessionattributesId.setAttributeName(attributeName);
        springsessionattributesId.setSessionPrimaryId(sessionPrimaryId);

        LOGGER.debug("Deleting SpringSessionAttributes with id: {}" , springsessionattributesId);
        SpringSessionAttributes springSessionAttributes = springSessionAttributesService.delete(springsessionattributesId);

        return springSessionAttributes != null;
    }


    /**
     * @deprecated Use {@link #findSpringSessionAttributes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SpringSessionAttributes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SpringSessionAttributes> searchSpringSessionAttributesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SpringSessionAttributes list by query filter:{}", (Object) queryFilters);
        return springSessionAttributesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SpringSessionAttributes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SpringSessionAttributes> findSpringSessionAttributes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SpringSessionAttributes list by filter:", query);
        return springSessionAttributesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SpringSessionAttributes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SpringSessionAttributes> filterSpringSessionAttributes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SpringSessionAttributes list by filter", query);
        return springSessionAttributesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSpringSessionAttributes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return springSessionAttributesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportSpringSessionAttributesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SpringSessionAttributes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> springSessionAttributesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SpringSessionAttributes instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countSpringSessionAttributes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SpringSessionAttributes");
		return springSessionAttributesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getSpringSessionAttributesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return springSessionAttributesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SpringSessionAttributesService instance
	 */
	protected void setSpringSessionAttributesService(SpringSessionAttributesService service) {
		this.springSessionAttributesService = service;
	}

}