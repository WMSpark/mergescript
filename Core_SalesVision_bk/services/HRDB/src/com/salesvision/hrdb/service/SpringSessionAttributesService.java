/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision.hrdb.SpringSessionAttributes;
import com.salesvision.hrdb.SpringSessionAttributesId;

/**
 * Service object for domain model class {@link SpringSessionAttributes}.
 */
public interface SpringSessionAttributesService {

    /**
     * Creates a new SpringSessionAttributes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSessionAttributes if any.
     *
     * @param springSessionAttributes Details of the SpringSessionAttributes to be created; value cannot be null.
     * @return The newly created SpringSessionAttributes.
     */
    SpringSessionAttributes create(@Valid SpringSessionAttributes springSessionAttributes);


	/**
     * Returns SpringSessionAttributes by given id if exists.
     *
     * @param springsessionattributesId The id of the SpringSessionAttributes to get; value cannot be null.
     * @return SpringSessionAttributes associated with the given springsessionattributesId.
	 * @throws EntityNotFoundException If no SpringSessionAttributes is found.
     */
    SpringSessionAttributes getById(SpringSessionAttributesId springsessionattributesId);

    /**
     * Find and return the SpringSessionAttributes by given id if exists, returns null otherwise.
     *
     * @param springsessionattributesId The id of the SpringSessionAttributes to get; value cannot be null.
     * @return SpringSessionAttributes associated with the given springsessionattributesId.
     */
    SpringSessionAttributes findById(SpringSessionAttributesId springsessionattributesId);

	/**
     * Find and return the list of SpringSessionAttributes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param springsessionattributesIds The id's of the SpringSessionAttributes to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SpringSessionAttributes associated with the given springsessionattributesIds.
     */
    List<SpringSessionAttributes> findByMultipleIds(List<SpringSessionAttributesId> springsessionattributesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing SpringSessionAttributes. It replaces all fields of the existing SpringSessionAttributes with the given springSessionAttributes.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSessionAttributes if any.
     *
     * @param springSessionAttributes The details of the SpringSessionAttributes to be updated; value cannot be null.
     * @return The updated SpringSessionAttributes.
     * @throws EntityNotFoundException if no SpringSessionAttributes is found with given input.
     */
    SpringSessionAttributes update(@Valid SpringSessionAttributes springSessionAttributes);


    /**
     * Partially updates the details of an existing SpringSessionAttributes. It updates only the
     * fields of the existing SpringSessionAttributes which are passed in the springSessionAttributesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSessionAttributes if any.
     *
     * @param springsessionattributesId The id of the SpringSessionAttributes to be deleted; value cannot be null.
     * @param springSessionAttributesPatch The partial data of SpringSessionAttributes which is supposed to be updated; value cannot be null.
     * @return The updated SpringSessionAttributes.
     * @throws EntityNotFoundException if no SpringSessionAttributes is found with given input.
     */
    SpringSessionAttributes partialUpdate(SpringSessionAttributesId springsessionattributesId, Map<String, Object> springSessionAttributesPatch);

    /**
     * Deletes an existing SpringSessionAttributes with the given id.
     *
     * @param springsessionattributesId The id of the SpringSessionAttributes to be deleted; value cannot be null.
     * @return The deleted SpringSessionAttributes.
     * @throws EntityNotFoundException if no SpringSessionAttributes found with the given id.
     */
    SpringSessionAttributes delete(SpringSessionAttributesId springsessionattributesId);

    /**
     * Deletes an existing SpringSessionAttributes with the given object.
     *
     * @param springSessionAttributes The instance of the SpringSessionAttributes to be deleted; value cannot be null.
     */
    void delete(SpringSessionAttributes springSessionAttributes);

    /**
     * Find all SpringSessionAttributes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SpringSessionAttributes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SpringSessionAttributes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SpringSessionAttributes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SpringSessionAttributes.
     *
     * @see Pageable
     * @see Page
     */
    Page<SpringSessionAttributes> findAll(String query, Pageable pageable);

    /**
     * Exports all SpringSessionAttributes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SpringSessionAttributes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SpringSessionAttributes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SpringSessionAttributes.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}