/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision.hrdb.SpringSession;
import com.salesvision.hrdb.SpringSessionAttributes;


/**
 * ServiceImpl object for domain model class SpringSession.
 *
 * @see SpringSession
 */
@Service("HRDB.SpringSessionService")
@Validated
@EntityService(entityClass = SpringSession.class, serviceId = "HRDB")
public class SpringSessionServiceImpl implements SpringSessionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringSessionServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("HRDB.SpringSessionAttributesService")
    private SpringSessionAttributesService springSessionAttributesService;

    @Autowired
    @Qualifier("HRDB.SpringSessionDao")
    private WMGenericDao<SpringSession, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SpringSession, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public SpringSession create(SpringSession springSession) {
        LOGGER.debug("Creating a new SpringSession with information: {}", springSession);

        SpringSession springSessionCreated = this.wmGenericDao.create(springSession);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(springSessionCreated);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public SpringSession getById(String springsessionId) {
        LOGGER.debug("Finding SpringSession by id: {}", springsessionId);
        return this.wmGenericDao.findById(springsessionId);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public SpringSession findById(String springsessionId) {
        LOGGER.debug("Finding SpringSession by id: {}", springsessionId);
        try {
            return this.wmGenericDao.findById(springsessionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SpringSession found with id: {}", springsessionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public List<SpringSession> findByMultipleIds(List<String> springsessionIds, boolean orderedReturn) {
        LOGGER.debug("Finding SpringSessions by ids: {}", springsessionIds);

        return this.wmGenericDao.findByMultipleIds(springsessionIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public SpringSession getBySessionId(String sessionId) {
        Map<String, Object> sessionIdMap = new HashMap<>();
        sessionIdMap.put("sessionId", sessionId);

        LOGGER.debug("Finding SpringSession by unique keys: {}", sessionIdMap);
        return this.wmGenericDao.findByUniqueKey(sessionIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "HRDBTransactionManager")
    @Override
    public SpringSession update(SpringSession springSession) {
        LOGGER.debug("Updating SpringSession with information: {}", springSession);

        this.wmGenericDao.update(springSession);
        this.wmGenericDao.refresh(springSession);

        return springSession;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public SpringSession partialUpdate(String springsessionId, Map<String, Object>springSessionPatch) {
        LOGGER.debug("Partially Updating the SpringSession with id: {}", springsessionId);

        SpringSession springSession = getById(springsessionId);

        try {
            ObjectReader springSessionReader = this.objectMapper.reader().forType(SpringSession.class).withValueToUpdate(springSession);
            springSession = springSessionReader.readValue(this.objectMapper.writeValueAsString(springSessionPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", springSessionPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        springSession = update(springSession);

        return springSession;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public SpringSession delete(String springsessionId) {
        LOGGER.debug("Deleting SpringSession with id: {}", springsessionId);
        SpringSession deleted = this.wmGenericDao.findById(springsessionId);
        if (deleted == null) {
            LOGGER.debug("No SpringSession found with id: {}", springsessionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SpringSession.class.getSimpleName(), springsessionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public void delete(SpringSession springSession) {
        LOGGER.debug("Deleting SpringSession with {}", springSession);
        this.wmGenericDao.delete(springSession);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<SpringSession> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<SpringSession> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HRDB for table SpringSession to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service HRDB for table SpringSession to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<SpringSessionAttributes> findAssociatedSpringSessionAttributeses(String primaryId, Pageable pageable) {
        LOGGER.debug("Fetching all associated springSessionAttributeses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("springSession.primaryId = '" + primaryId + "'");

        return springSessionAttributesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SpringSessionAttributesService instance
     */
    protected void setSpringSessionAttributesService(SpringSessionAttributesService service) {
        this.springSessionAttributesService = service;
    }

}