/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision.hrdb.SpringSessionAttributes;
import com.salesvision.hrdb.SpringSessionAttributesId;


/**
 * ServiceImpl object for domain model class SpringSessionAttributes.
 *
 * @see SpringSessionAttributes
 */
@Service("HRDB.SpringSessionAttributesService")
@Validated
@EntityService(entityClass = SpringSessionAttributes.class, serviceId = "HRDB")
public class SpringSessionAttributesServiceImpl implements SpringSessionAttributesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SpringSessionAttributesServiceImpl.class);


    @Autowired
    @Qualifier("HRDB.SpringSessionAttributesDao")
    private WMGenericDao<SpringSessionAttributes, SpringSessionAttributesId> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SpringSessionAttributes, SpringSessionAttributesId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public SpringSessionAttributes create(SpringSessionAttributes springSessionAttributes) {
        LOGGER.debug("Creating a new SpringSessionAttributes with information: {}", springSessionAttributes);

        SpringSessionAttributes springSessionAttributesCreated = this.wmGenericDao.create(springSessionAttributes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(springSessionAttributesCreated);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public SpringSessionAttributes getById(SpringSessionAttributesId springsessionattributesId) {
        LOGGER.debug("Finding SpringSessionAttributes by id: {}", springsessionattributesId);
        return this.wmGenericDao.findById(springsessionattributesId);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public SpringSessionAttributes findById(SpringSessionAttributesId springsessionattributesId) {
        LOGGER.debug("Finding SpringSessionAttributes by id: {}", springsessionattributesId);
        try {
            return this.wmGenericDao.findById(springsessionattributesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SpringSessionAttributes found with id: {}", springsessionattributesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public List<SpringSessionAttributes> findByMultipleIds(List<SpringSessionAttributesId> springsessionattributesIds, boolean orderedReturn) {
        LOGGER.debug("Finding SpringSessionAttributes by ids: {}", springsessionattributesIds);

        return this.wmGenericDao.findByMultipleIds(springsessionattributesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "HRDBTransactionManager")
    @Override
    public SpringSessionAttributes update(SpringSessionAttributes springSessionAttributes) {
        LOGGER.debug("Updating SpringSessionAttributes with information: {}", springSessionAttributes);

        this.wmGenericDao.update(springSessionAttributes);
        this.wmGenericDao.refresh(springSessionAttributes);

        return springSessionAttributes;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public SpringSessionAttributes partialUpdate(SpringSessionAttributesId springsessionattributesId, Map<String, Object>springSessionAttributesPatch) {
        LOGGER.debug("Partially Updating the SpringSessionAttributes with id: {}", springsessionattributesId);

        SpringSessionAttributes springSessionAttributes = getById(springsessionattributesId);

        try {
            ObjectReader springSessionAttributesReader = this.objectMapper.reader().forType(SpringSessionAttributes.class).withValueToUpdate(springSessionAttributes);
            springSessionAttributes = springSessionAttributesReader.readValue(this.objectMapper.writeValueAsString(springSessionAttributesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", springSessionAttributesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        springSessionAttributes = update(springSessionAttributes);

        return springSessionAttributes;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public SpringSessionAttributes delete(SpringSessionAttributesId springsessionattributesId) {
        LOGGER.debug("Deleting SpringSessionAttributes with id: {}", springsessionattributesId);
        SpringSessionAttributes deleted = this.wmGenericDao.findById(springsessionattributesId);
        if (deleted == null) {
            LOGGER.debug("No SpringSessionAttributes found with id: {}", springsessionattributesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SpringSessionAttributes.class.getSimpleName(), springsessionattributesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "HRDBTransactionManager")
    @Override
    public void delete(SpringSessionAttributes springSessionAttributes) {
        LOGGER.debug("Deleting SpringSessionAttributes with {}", springSessionAttributes);
        this.wmGenericDao.delete(springSessionAttributes);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<SpringSessionAttributes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessionAttributes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<SpringSessionAttributes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SpringSessionAttributes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HRDB for table SpringSessionAttributes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service HRDB for table SpringSessionAttributes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HRDBTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}