/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.salesvision.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision.hrdb.SpringSession;
import com.salesvision.hrdb.SpringSessionAttributes;

/**
 * Service object for domain model class {@link SpringSession}.
 */
public interface SpringSessionService {

    /**
     * Creates a new SpringSession. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSession if any.
     *
     * @param springSession Details of the SpringSession to be created; value cannot be null.
     * @return The newly created SpringSession.
     */
    SpringSession create(@Valid SpringSession springSession);


	/**
     * Returns SpringSession by given id if exists.
     *
     * @param springsessionId The id of the SpringSession to get; value cannot be null.
     * @return SpringSession associated with the given springsessionId.
	 * @throws EntityNotFoundException If no SpringSession is found.
     */
    SpringSession getById(String springsessionId);

    /**
     * Find and return the SpringSession by given id if exists, returns null otherwise.
     *
     * @param springsessionId The id of the SpringSession to get; value cannot be null.
     * @return SpringSession associated with the given springsessionId.
     */
    SpringSession findById(String springsessionId);

	/**
     * Find and return the list of SpringSessions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param springsessionIds The id's of the SpringSession to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return SpringSessions associated with the given springsessionIds.
     */
    List<SpringSession> findByMultipleIds(List<String> springsessionIds, boolean orderedReturn);

    /**
     * Find and return the SpringSession for given sessionId  if exists.
     *
     * @param sessionId value of sessionId; value cannot be null.
     * @return SpringSession associated with the given inputs.
     * @throws EntityNotFoundException if no matching SpringSession found.
     */
    SpringSession getBySessionId(String sessionId);

    /**
     * Updates the details of an existing SpringSession. It replaces all fields of the existing SpringSession with the given springSession.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSession if any.
     *
     * @param springSession The details of the SpringSession to be updated; value cannot be null.
     * @return The updated SpringSession.
     * @throws EntityNotFoundException if no SpringSession is found with given input.
     */
    SpringSession update(@Valid SpringSession springSession);


    /**
     * Partially updates the details of an existing SpringSession. It updates only the
     * fields of the existing SpringSession which are passed in the springSessionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on SpringSession if any.
     *
     * @param springsessionId The id of the SpringSession to be deleted; value cannot be null.
     * @param springSessionPatch The partial data of SpringSession which is supposed to be updated; value cannot be null.
     * @return The updated SpringSession.
     * @throws EntityNotFoundException if no SpringSession is found with given input.
     */
    SpringSession partialUpdate(String springsessionId, Map<String, Object> springSessionPatch);

    /**
     * Deletes an existing SpringSession with the given id.
     *
     * @param springsessionId The id of the SpringSession to be deleted; value cannot be null.
     * @return The deleted SpringSession.
     * @throws EntityNotFoundException if no SpringSession found with the given id.
     */
    SpringSession delete(String springsessionId);

    /**
     * Deletes an existing SpringSession with the given object.
     *
     * @param springSession The instance of the SpringSession to be deleted; value cannot be null.
     */
    void delete(SpringSession springSession);

    /**
     * Find all SpringSessions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SpringSessions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<SpringSession> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all SpringSessions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching SpringSessions.
     *
     * @see Pageable
     * @see Page
     */
    Page<SpringSession> findAll(String query, Pageable pageable);

    /**
     * Exports all SpringSessions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all SpringSessions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the SpringSessions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the SpringSession.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated springSessionAttributeses for given SpringSession id.
     *
     * @param primaryId value of primaryId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated SpringSessionAttributes instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<SpringSessionAttributes> findAssociatedSpringSessionAttributeses(String primaryId, Pageable pageable);

}