/*Generated by WaveMaker Studio*/
package com.transfer_funds.bnktransferservice;

import java.util.LinkedHashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import com.transfer_funds.BNKTransfer.model.CardLoadBody;
import com.transfer_funds.BNKTransfer.model.CardholderInfoBody;
import com.transfer_funds.BNKTransfer.model.ConsumerAccountlistBody;
import com.transfer_funds.BNKTransfer.model.VirtualaccountBalanceBody;
import com.wavemaker.runtime.service.annotations.HideFromClient;

import java.io.IOException;

//import com.transfer_funds.bnktransferservice.model.*;

/**
 * This is a singleton class with all its public methods exposed as REST APIs via generated controller class. To avoid exposing an API for a particular public
 * method, annotate it with @HideFromClient.
 * <p>
 * Method names will play a major role in defining the Http Method for the generated APIs. For example, a method name that starts with delete/remove, will make
 * the API exposed as Http Method "DELETE".
 * <p>
 * Method Parameters of type primitives (including java.lang.String) will be exposed as Query Parameters & Complex Types/Objects will become part of the Request
 * body in the generated API.
 * <p>
 * NOTE: We do not recommend using method overloading on client exposed methods.
 */
@HideFromClient
public class BnkTransferService {

    private static final Logger logger = LoggerFactory.getLogger(BnkTransferService.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public CardLoadBody bankableFundCardRequest(Map<String, Object> formData, String transferProfileId) throws IOException {
        Map<String, Object> fundInfo = JsonPath.parse(objectMapper.writeValueAsString(formData)).read("$");
        String notes = JsonPath.parse(objectMapper.writeValueAsString(formData)).read("$.transaction_meta.Notes");
        CardLoadBody transferInfo = new CardLoadBody();
        transferInfo.setEntityId(transferProfileId);
        transferInfo.setCardClientCode(fundInfo.get("beneficiary_id").toString());
        transferInfo.setVirtualAccountRef(fundInfo.get("ledger_id").toString());
        transferInfo.setAmount(fundInfo.get("amount").toString());
        transferInfo.setCurrency(fundInfo.get("currency").toString());
        transferInfo.setCorpLoadDesc(notes);
        transferInfo.setCardHolderLoadDesc(notes);
        return transferInfo;
    }

    public VirtualaccountBalanceBody getAccountDetailsById(String transferProfileId, String managedAccountId) {
        VirtualaccountBalanceBody accountDetails = new VirtualaccountBalanceBody();
        accountDetails.setEntityId(transferProfileId);
        accountDetails.setVirtualAccountRef(managedAccountId);
        return accountDetails;
    }

    public ConsumerAccountlistBody constructAllAccountDetails(String transferProfileId, String profileId) {
        ConsumerAccountlistBody request = new ConsumerAccountlistBody();
        request.setEntityId(transferProfileId);
        request.setChClientCode(profileId);
        return request;
    }

    public CardholderInfoBody constructAllCardsDetail(String transferProfileId, String profileId) {
        CardholderInfoBody card = new CardholderInfoBody();
        card.setEntityId(transferProfileId);
        card.setChClientCode(profileId);
        return card;
    }
}
