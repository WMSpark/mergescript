/*Generated by WaveMaker Studio*/
package com.transfer_funds.wvrtransferservice;

import java.util.LinkedHashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import com.rb_transactions_only_prefab.weavrfundcard.TransferCreateRequest;
import com.transfer_funds.wvrTransfer.model.CurrencyAmount;
import com.transfer_funds.wvrTransfer.model.InstrumentId;
import com.transfer_funds.wvrTransfer.model.TransfersBody;
import com.wavemaker.runtime.service.annotations.HideFromClient;

import java.io.IOException;
//import com.transfer_funds.wvrtransferservice.model.*;

/**
 * This is a singleton class with all its public methods exposed as REST APIs via generated controller class. To avoid exposing an API for a particular public
 * method, annotate it with @HideFromClient.
 * <p>
 * Method names will play a major role in defining the Http Method for the generated APIs. For example, a method name that starts with delete/remove, will make
 * the API exposed as Http Method "DELETE".
 * <p>
 * Method Parameters of type primitives (including java.lang.String) will be exposed as Query Parameters & Complex Types/Objects will become part of the Request
 * body in the generated API.
 * <p>
 * NOTE: We do not recommend using method overloading on client exposed methods.
 */
@HideFromClient
public class WvrTransferService {

    private static final Logger logger = LoggerFactory.getLogger(WvrTransferService.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();

    public TransfersBody wvFundCardRequest(Map<String, Object> formData, String transferProfileId) throws IOException {
        Map<String, Object> fundInfo = JsonPath.parse(objectMapper.writeValueAsString(formData)).read("$");
        TransfersBody transfersBody = new TransfersBody();
        transfersBody.setProfileId(transferProfileId);

        InstrumentId source = new InstrumentId();
        source.setId(fundInfo.get("ledger_id").toString());
        source.setType(InstrumentId.TypeEnum.ACCOUNTS);
        transfersBody.setSource(source);

        InstrumentId destination = new InstrumentId();
        source.setId(fundInfo.get("beneficiary_id").toString());
        source.setType(InstrumentId.TypeEnum.CARDS);
        transfersBody.setDestination(destination);
        // String currency = getManagedCardDetails(hostName, authorization, fundInfo.get("beneficiary_id").toString(), servletRequest);
        CurrencyAmount currencyAmount = new CurrencyAmount();
        currencyAmount.setCurrency(fundInfo.get("currency").toString());
        currencyAmount.setAmount((Long) fundInfo.get("amount"));
        transfersBody.setDestinationAmount(currencyAmount);
        transfersBody.setTag("PersonalTransfer");
        return transfersBody;
    }

}
