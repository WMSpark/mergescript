/*
 * Bankable API
 * Bankable API description
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.BNKTransfer.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.transfer_funds.BNKTransfer.model.InlineResponse2003PendingStatementTransactionDigitalWallet;
import com.transfer_funds.BNKTransfer.model.InlineResponse2003PendingStatementTransactionMerchant;
import com.transfer_funds.BNKTransfer.model.InlineResponse2003SettledStatementTransactionSettlement;
/**
 * InlineResponse2003SettledStatementTransaction
 */

public class InlineResponse2003SettledStatementTransaction {
  @JsonProperty("dateTime")
  private String dateTime = null;

  @JsonProperty("country")
  private String country = null;

  @JsonProperty("transactionCurrency")
  private String transactionCurrency = null;

  @JsonProperty("scheme")
  private String scheme = null;

  @JsonProperty("merchant")
  private InlineResponse2003PendingStatementTransactionMerchant merchant = null;

  @JsonProperty("counterpartyAccountDetails")
  private Object counterpartyAccountDetails = null;

  @JsonProperty("type")
  private Integer type = null;

  @JsonProperty("settlement")
  private InlineResponse2003SettledStatementTransactionSettlement settlement = null;

  @JsonProperty("reference")
  private Object reference = null;

  @JsonProperty("ordererRef")
  private String ordererRef = null;

  @JsonProperty("trn")
  private String trn = null;

  @JsonProperty("digitalWallet")
  private InlineResponse2003PendingStatementTransactionDigitalWallet digitalWallet = null;

  @JsonProperty("transactionAmount")
  private Object transactionAmount = null;

  @JsonProperty("counterpartyBankAccountDetails")
  private String counterpartyBankAccountDetails = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("arn")
  private String arn = null;

  public InlineResponse2003SettledStatementTransaction dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

   /**
   * Date and time, formatted yyyy-mm-dd hh:mm:ss.
   * @return dateTime
  **/
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }

  public InlineResponse2003SettledStatementTransaction country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Two-character ISO alphabetic code. Examples: FR / GB. If left blank, the country of the client will be used.
   * @return country
  **/
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public InlineResponse2003SettledStatementTransaction transactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
    return this;
  }

   /**
   * Currency. ISO 3 characters code.
   * @return transactionCurrency
  **/
  public String getTransactionCurrency() {
    return transactionCurrency;
  }

  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }

  public InlineResponse2003SettledStatementTransaction scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

   /**
   * This is the payment scheme that governs the processing of operations. For faster payments, the key will be \&quot;FPS\&quot;.
   * @return scheme
  **/
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }

  public InlineResponse2003SettledStatementTransaction merchant(InlineResponse2003PendingStatementTransactionMerchant merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  public InlineResponse2003PendingStatementTransactionMerchant getMerchant() {
    return merchant;
  }

  public void setMerchant(InlineResponse2003PendingStatementTransactionMerchant merchant) {
    this.merchant = merchant;
  }

  public InlineResponse2003SettledStatementTransaction counterpartyAccountDetails(Object counterpartyAccountDetails) {
    this.counterpartyAccountDetails = counterpartyAccountDetails;
    return this;
  }

   /**
   * Get counterpartyAccountDetails
   * @return counterpartyAccountDetails
  **/
  public Object getCounterpartyAccountDetails() {
    return counterpartyAccountDetails;
  }

  public void setCounterpartyAccountDetails(Object counterpartyAccountDetails) {
    this.counterpartyAccountDetails = counterpartyAccountDetails;
  }

  public InlineResponse2003SettledStatementTransaction type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the transaction: 0: Internal 1: Purchase 2: ATM Cash 3: Cashback 4: Offline Balance Collection 5: ATM Balance 6: Purchase Reversal 7: ATM Reversal 8: TopUp 9: Transfer 10: Adjustment 11: Refund 12: Reimbursment
   * @return type
  **/
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }

  public InlineResponse2003SettledStatementTransaction settlement(InlineResponse2003SettledStatementTransactionSettlement settlement) {
    this.settlement = settlement;
    return this;
  }

   /**
   * Get settlement
   * @return settlement
  **/
  public InlineResponse2003SettledStatementTransactionSettlement getSettlement() {
    return settlement;
  }

  public void setSettlement(InlineResponse2003SettledStatementTransactionSettlement settlement) {
    this.settlement = settlement;
  }

  public InlineResponse2003SettledStatementTransaction reference(Object reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  public Object getReference() {
    return reference;
  }

  public void setReference(Object reference) {
    this.reference = reference;
  }

  public InlineResponse2003SettledStatementTransaction ordererRef(String ordererRef) {
    this.ordererRef = ordererRef;
    return this;
  }

   /**
   * External reference, assigned by the orderer, used to uniquely identify the order. This reference is transmitted throughout the entire payment circuit.
   * @return ordererRef
  **/
  public String getOrdererRef() {
    return ordererRef;
  }

  public void setOrdererRef(String ordererRef) {
    this.ordererRef = ordererRef;
  }

  public InlineResponse2003SettledStatementTransaction trn(String trn) {
    this.trn = trn;
    return this;
  }

   /**
   * Transaction Reference Number
   * @return trn
  **/
  public String getTrn() {
    return trn;
  }

  public void setTrn(String trn) {
    this.trn = trn;
  }

  public InlineResponse2003SettledStatementTransaction digitalWallet(InlineResponse2003PendingStatementTransactionDigitalWallet digitalWallet) {
    this.digitalWallet = digitalWallet;
    return this;
  }

   /**
   * Get digitalWallet
   * @return digitalWallet
  **/
  public InlineResponse2003PendingStatementTransactionDigitalWallet getDigitalWallet() {
    return digitalWallet;
  }

  public void setDigitalWallet(InlineResponse2003PendingStatementTransactionDigitalWallet digitalWallet) {
    this.digitalWallet = digitalWallet;
  }

  public InlineResponse2003SettledStatementTransaction transactionAmount(Object transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Get transactionAmount
   * @return transactionAmount
  **/
  public Object getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Object transactionAmount) {
    this.transactionAmount = transactionAmount;
  }

  public InlineResponse2003SettledStatementTransaction counterpartyBankAccountDetails(String counterpartyBankAccountDetails) {
    this.counterpartyBankAccountDetails = counterpartyBankAccountDetails;
    return this;
  }

   /**
   * Counterparty banking details. Mandatory for âPayment Transactionsâ.
   * @return counterpartyBankAccountDetails
  **/
  public String getCounterpartyBankAccountDetails() {
    return counterpartyBankAccountDetails;
  }

  public void setCounterpartyBankAccountDetails(String counterpartyBankAccountDetails) {
    this.counterpartyBankAccountDetails = counterpartyBankAccountDetails;
  }

  public InlineResponse2003SettledStatementTransaction id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique id of the transaction. The transaction keeps this id all along its life. The other references can change depending on the status.
   * @return id
  **/
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public InlineResponse2003SettledStatementTransaction arn(String arn) {
    this.arn = arn;
    return this;
  }

   /**
   * Acquirer Reference Number
   * @return arn
  **/
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003SettledStatementTransaction inline_response_200_3_settledStatementTransaction = (InlineResponse2003SettledStatementTransaction) o;
    return Objects.equals(this.dateTime, inline_response_200_3_settledStatementTransaction.dateTime) &&
        Objects.equals(this.country, inline_response_200_3_settledStatementTransaction.country) &&
        Objects.equals(this.transactionCurrency, inline_response_200_3_settledStatementTransaction.transactionCurrency) &&
        Objects.equals(this.scheme, inline_response_200_3_settledStatementTransaction.scheme) &&
        Objects.equals(this.merchant, inline_response_200_3_settledStatementTransaction.merchant) &&
        Objects.equals(this.counterpartyAccountDetails, inline_response_200_3_settledStatementTransaction.counterpartyAccountDetails) &&
        Objects.equals(this.type, inline_response_200_3_settledStatementTransaction.type) &&
        Objects.equals(this.settlement, inline_response_200_3_settledStatementTransaction.settlement) &&
        Objects.equals(this.reference, inline_response_200_3_settledStatementTransaction.reference) &&
        Objects.equals(this.ordererRef, inline_response_200_3_settledStatementTransaction.ordererRef) &&
        Objects.equals(this.trn, inline_response_200_3_settledStatementTransaction.trn) &&
        Objects.equals(this.digitalWallet, inline_response_200_3_settledStatementTransaction.digitalWallet) &&
        Objects.equals(this.transactionAmount, inline_response_200_3_settledStatementTransaction.transactionAmount) &&
        Objects.equals(this.counterpartyBankAccountDetails, inline_response_200_3_settledStatementTransaction.counterpartyBankAccountDetails) &&
        Objects.equals(this.id, inline_response_200_3_settledStatementTransaction.id) &&
        Objects.equals(this.arn, inline_response_200_3_settledStatementTransaction.arn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTime, country, transactionCurrency, scheme, merchant, counterpartyAccountDetails, type, settlement, reference, ordererRef, trn, digitalWallet, transactionAmount, counterpartyBankAccountDetails, id, arn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003SettledStatementTransaction {\n");
    
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    counterpartyAccountDetails: ").append(toIndentedString(counterpartyAccountDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    settlement: ").append(toIndentedString(settlement)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    ordererRef: ").append(toIndentedString(ordererRef)).append("\n");
    sb.append("    trn: ").append(toIndentedString(trn)).append("\n");
    sb.append("    digitalWallet: ").append(toIndentedString(digitalWallet)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    counterpartyBankAccountDetails: ").append(toIndentedString(counterpartyBankAccountDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
