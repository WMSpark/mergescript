/*
 * Railsbank customer API
 * Public API for Railsbank customers
 *
 * OpenAPI spec version: api
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.RBSwagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
/**
 * FxQuoteBody
 */

public class FxQuoteBody {
  /**
   * The currency to be debited in the sending ledger
   */
  public enum SenderAssetTypeEnum {
    PLN("pln"),
    AUD("aud"),
    CHF("chf"),
    CAD("cad"),
    SEK("sek"),
    GOLDBLOC("goldbloc"),
    USD("usd"),
    NOK("nok"),
    WHISKY("whisky"),
    VIRTUAL_CURRENCY("virtual-currency"),
    JPY("jpy"),
    HUF("huf"),
    NZD("nzd"),
    GOLD("gold"),
    CZK("czk"),
    SGD("sgd"),
    RON("ron"),
    GBP("gbp"),
    HRK("hrk"),
    EUR("eur");

    private String value;

    SenderAssetTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SenderAssetTypeEnum fromValue(String input) {
      for (SenderAssetTypeEnum b : SenderAssetTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("sender_asset_type")
  private SenderAssetTypeEnum sender_asset_type = null;

  @JsonProperty("amount")
  private BigDecimal amount = null;

  /**
   * The currency to be credited in the receiving account
   */
  public enum BeneficiaryAssetTypeEnum {
    PLN("pln"),
    AUD("aud"),
    CHF("chf"),
    CAD("cad"),
    SEK("sek"),
    GOLDBLOC("goldbloc"),
    USD("usd"),
    NOK("nok"),
    WHISKY("whisky"),
    VIRTUAL_CURRENCY("virtual-currency"),
    JPY("jpy"),
    HUF("huf"),
    NZD("nzd"),
    GOLD("gold"),
    CZK("czk"),
    SGD("sgd"),
    RON("ron"),
    GBP("gbp"),
    HRK("hrk"),
    EUR("eur");

    private String value;

    BeneficiaryAssetTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static BeneficiaryAssetTypeEnum fromValue(String input) {
      for (BeneficiaryAssetTypeEnum b : BeneficiaryAssetTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("beneficiary_asset_type")
  private BeneficiaryAssetTypeEnum beneficiary_asset_type = null;

  /**
   * Sets the base currency for pair rate direction, which determines how much the base currency is worth as measured against the second currency. It assures if the amount specified will either be debited from the sending ledger or credited in the receiving account
   */
  public enum FixedSideEnum {
    BENEFICIARY("beneficiary"),
    SENDER("sender");

    private String value;

    FixedSideEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FixedSideEnum fromValue(String input) {
      for (FixedSideEnum b : FixedSideEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("fixed_side")
  private FixedSideEnum fixed_side = null;

  public FxQuoteBody sender_asset_type(SenderAssetTypeEnum sender_asset_type) {
    this.sender_asset_type = sender_asset_type;
    return this;
  }

   /**
   * The currency to be debited in the sending ledger
   * @return sender_asset_type
  **/
  public SenderAssetTypeEnum getSenderAssetType() {
    return sender_asset_type;
  }

  public void setSenderAssetType(SenderAssetTypeEnum sender_asset_type) {
    this.sender_asset_type = sender_asset_type;
  }

  public FxQuoteBody amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the fixed_side currency to be converted
   * @return amount
  **/
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public FxQuoteBody beneficiary_asset_type(BeneficiaryAssetTypeEnum beneficiary_asset_type) {
    this.beneficiary_asset_type = beneficiary_asset_type;
    return this;
  }

   /**
   * The currency to be credited in the receiving account
   * @return beneficiary_asset_type
  **/
  public BeneficiaryAssetTypeEnum getBeneficiaryAssetType() {
    return beneficiary_asset_type;
  }

  public void setBeneficiaryAssetType(BeneficiaryAssetTypeEnum beneficiary_asset_type) {
    this.beneficiary_asset_type = beneficiary_asset_type;
  }

  public FxQuoteBody fixed_side(FixedSideEnum fixed_side) {
    this.fixed_side = fixed_side;
    return this;
  }

   /**
   * Sets the base currency for pair rate direction, which determines how much the base currency is worth as measured against the second currency. It assures if the amount specified will either be debited from the sending ledger or credited in the receiving account
   * @return fixed_side
  **/
  public FixedSideEnum getFixedSide() {
    return fixed_side;
  }

  public void setFixedSide(FixedSideEnum fixed_side) {
    this.fixed_side = fixed_side;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FxQuoteBody fx_quote_body = (FxQuoteBody) o;
    return Objects.equals(this.sender_asset_type, fx_quote_body.sender_asset_type) &&
        Objects.equals(this.amount, fx_quote_body.amount) &&
        Objects.equals(this.beneficiary_asset_type, fx_quote_body.beneficiary_asset_type) &&
        Objects.equals(this.fixed_side, fx_quote_body.fixed_side);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sender_asset_type, amount, beneficiary_asset_type, fixed_side);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxQuoteBody {\n");
    
    sb.append("    sender_asset_type: ").append(toIndentedString(sender_asset_type)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    beneficiary_asset_type: ").append(toIndentedString(beneficiary_asset_type)).append("\n");
    sb.append("    fixed_side: ").append(toIndentedString(fixed_side)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
