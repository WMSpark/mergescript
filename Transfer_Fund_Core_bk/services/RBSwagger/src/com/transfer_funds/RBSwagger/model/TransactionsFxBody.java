/*
 * Railsbank customer API
 * Public API for Railsbank customers
 *
 * OpenAPI spec version: api
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.RBSwagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
/**
 * TransactionsFxBody
 */

public class TransactionsFxBody {
  @JsonProperty("reference")
  private String reference = null;

  @JsonProperty("beneficiary_account_id")
  private String beneficiary_account_id = null;

  @JsonProperty("beneficiary_id")
  private String beneficiary_id = null;

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("amount")
  private BigDecimal amount = null;

  @JsonProperty("transaction_meta")
  private Object transaction_meta = null;

  @JsonProperty("ledger_from_id")
  private String ledger_from_id = null;

  /**
   * Sets the base currency for pair rate direction, which determines how much the base currency is worth as measured against the second currency. It assures if the amount specified will either be debited from the sending ledger or credited in the receiving account
   */
  public enum FixedSideEnum {
    BENEFICIARY("beneficiary"),
    SENDER("sender");

    private String value;

    FixedSideEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FixedSideEnum fromValue(String input) {
      for (FixedSideEnum b : FixedSideEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("fixed_side")
  private FixedSideEnum fixed_side = null;

  /**
   * Sets if transaction will be sent via local (e.g. UKFP) or international (e.g. Swift) payment schemes
   */
  public enum PaymentMethodEnum {
    SWIFT("swift"),
    LOCAL("local");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PaymentMethodEnum fromValue(String input) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("payment_method")
  private PaymentMethodEnum payment_method = null;

  public TransactionsFxBody reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Additional text to be passed with the transaction
   * @return reference
  **/
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public TransactionsFxBody beneficiary_account_id(String beneficiary_account_id) {
    this.beneficiary_account_id = beneficiary_account_id;
    return this;
  }

   /**
   * The Railsbank Beneficiary account ID to be credited. This needs to be set only when sending to an account that isn&#x27;t the beneficiary&#x27;s default
   * @return beneficiary_account_id
  **/
  public String getBeneficiaryAccountId() {
    return beneficiary_account_id;
  }

  public void setBeneficiaryAccountId(String beneficiary_account_id) {
    this.beneficiary_account_id = beneficiary_account_id;
  }

  public TransactionsFxBody beneficiary_id(String beneficiary_id) {
    this.beneficiary_id = beneficiary_id;
    return this;
  }

   /**
   * The receiving Railsbank Beneficiary ID. This needs to be set only if sending to the default beneficiary&#x27;s account
   * @return beneficiary_id
  **/
  public String getBeneficiaryId() {
    return beneficiary_id;
  }

  public void setBeneficiaryId(String beneficiary_id) {
    this.beneficiary_id = beneficiary_id;
  }

  public TransactionsFxBody reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Text the enduser can add to the transaction for the beneficiary
   * @return reason
  **/
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public TransactionsFxBody amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the fixed_side currency to be converted
   * @return amount
  **/
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public TransactionsFxBody transaction_meta(Object transaction_meta) {
    this.transaction_meta = transaction_meta;
    return this;
  }

   /**
   * An object allowing custom fields that can be created and stored against the transaction
   * @return transaction_meta
  **/
  public Object getTransactionMeta() {
    return transaction_meta;
  }

  public void setTransactionMeta(Object transaction_meta) {
    this.transaction_meta = transaction_meta;
  }

  public TransactionsFxBody ledger_from_id(String ledger_from_id) {
    this.ledger_from_id = ledger_from_id;
    return this;
  }

   /**
   * The Railsbank Ledger ID to be debited
   * @return ledger_from_id
  **/
  public String getLedgerFromId() {
    return ledger_from_id;
  }

  public void setLedgerFromId(String ledger_from_id) {
    this.ledger_from_id = ledger_from_id;
  }

  public TransactionsFxBody fixed_side(FixedSideEnum fixed_side) {
    this.fixed_side = fixed_side;
    return this;
  }

   /**
   * Sets the base currency for pair rate direction, which determines how much the base currency is worth as measured against the second currency. It assures if the amount specified will either be debited from the sending ledger or credited in the receiving account
   * @return fixed_side
  **/
  public FixedSideEnum getFixedSide() {
    return fixed_side;
  }

  public void setFixedSide(FixedSideEnum fixed_side) {
    this.fixed_side = fixed_side;
  }

  public TransactionsFxBody payment_method(PaymentMethodEnum payment_method) {
    this.payment_method = payment_method;
    return this;
  }

   /**
   * Sets if transaction will be sent via local (e.g. UKFP) or international (e.g. Swift) payment schemes
   * @return payment_method
  **/
  public PaymentMethodEnum getPaymentMethod() {
    return payment_method;
  }

  public void setPaymentMethod(PaymentMethodEnum payment_method) {
    this.payment_method = payment_method;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsFxBody transactions_fx_body = (TransactionsFxBody) o;
    return Objects.equals(this.reference, transactions_fx_body.reference) &&
        Objects.equals(this.beneficiary_account_id, transactions_fx_body.beneficiary_account_id) &&
        Objects.equals(this.beneficiary_id, transactions_fx_body.beneficiary_id) &&
        Objects.equals(this.reason, transactions_fx_body.reason) &&
        Objects.equals(this.amount, transactions_fx_body.amount) &&
        Objects.equals(this.transaction_meta, transactions_fx_body.transaction_meta) &&
        Objects.equals(this.ledger_from_id, transactions_fx_body.ledger_from_id) &&
        Objects.equals(this.fixed_side, transactions_fx_body.fixed_side) &&
        Objects.equals(this.payment_method, transactions_fx_body.payment_method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reference, beneficiary_account_id, beneficiary_id, reason, amount, transaction_meta, ledger_from_id, fixed_side, payment_method);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsFxBody {\n");
    
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    beneficiary_account_id: ").append(toIndentedString(beneficiary_account_id)).append("\n");
    sb.append("    beneficiary_id: ").append(toIndentedString(beneficiary_id)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    transaction_meta: ").append(toIndentedString(transaction_meta)).append("\n");
    sb.append("    ledger_from_id: ").append(toIndentedString(ledger_from_id)).append("\n");
    sb.append("    fixed_side: ").append(toIndentedString(fixed_side)).append("\n");
    sb.append("    payment_method: ").append(toIndentedString(payment_method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
