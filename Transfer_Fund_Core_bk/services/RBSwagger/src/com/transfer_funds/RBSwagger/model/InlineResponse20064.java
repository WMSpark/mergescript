/*
 * Railsbank customer API
 * Public API for Railsbank customers
 *
 * OpenAPI spec version: api
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.RBSwagger.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.transfer_funds.RBSwagger.model.V1customertransactionsInvoices;
import com.transfer_funds.RBSwagger.model.V1customertransactionsTo;
import com.transfer_funds.RBSwagger.model.V1customertransactionsTransactionInfo;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * InlineResponse20064
 */

public class InlineResponse20064 {
  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("card_rules_breached")
  private List<String> card_rules_breached = null;

  @JsonProperty("amount_beneficiary_account")
  private BigDecimal amount_beneficiary_account = null;

  @JsonProperty("event_group_created_at")
  private LocalDateTime event_group_created_at = null;

  /**
   * Sets the base currency for pair rate direction, which determines how much the base currency is worth as measured against the second currency. It assures if the amount specified will either be debited from the sending ledger or credited in the receiving account
   */
  public enum FixedSideEnum {
    BENEFICIARY("beneficiary"),
    SENDER("sender");

    private String value;

    FixedSideEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FixedSideEnum fromValue(String input) {
      for (FixedSideEnum b : FixedSideEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("fixed_side")
  private FixedSideEnum fixed_side = null;

  @JsonProperty("reference")
  private String reference = null;

  @JsonProperty("amount_ledger_from")
  private BigDecimal amount_ledger_from = null;

  @JsonProperty("transaction_meta")
  private Object transaction_meta = null;

  @JsonProperty("invoices")
  private List<V1customertransactionsInvoices> invoices = null;

  @JsonProperty("debit_payment_id")
  private String debit_payment_id = null;

  @JsonProperty("conversion_date")
  private LocalDate conversion_date = null;

  @JsonProperty("payment_info")
  private Object payment_info = null;

  @JsonProperty("point_of_sale_info")
  private String point_of_sale_info = null;

  /**
   * Sets if transaction will be sent via local (e.g. UKFP) or international (e.g. Swift) payment schemes
   */
  public enum PaymentMethodEnum {
    SWIFT("swift"),
    LOCAL("local");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PaymentMethodEnum fromValue(String input) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("payment_method")
  private PaymentMethodEnum payment_method = null;

  @JsonProperty("transaction_id")
  private String transaction_id = null;

  /**
   * Gets or Sets failure_reasons
   */
  public enum FailureReasonsEnum {
    DECLINED_BY_COMPLIANCE_FIREWALL("declined-by-compliance-firewall"),
    CARD_NOT_ACTIVE("card-not-active"),
    INSUFFICIENT_FUNDS("insufficient-funds"),
    PAYMENT_TOKEN_NOT_FOUND("payment-token-not-found"),
    PARTNER_ERROR("partner-error"),
    PAYMENT_TOKEN_NOT_ACTIVE("payment-token-not-active"),
    CARD_RULES_BREACHED("card-rules-breached"),
    CONTACT_SUPPORT("contact-support"),
    FX_ISSUE("fx-issue");

    private String value;

    FailureReasonsEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static FailureReasonsEnum fromValue(String input) {
      for (FailureReasonsEnum b : FailureReasonsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("failure_reasons")
  private List<FailureReasonsEnum> failure_reasons = null;

  @JsonProperty("merchant_details")
  private String merchant_details = null;

  @JsonProperty("settlement_date")
  private LocalDate settlement_date = null;

  /**
   * Gets or Sets asset_class
   */
  public enum AssetClassEnum {
    COMMODITY("commodity"),
    CURRENCY("currency");

    private String value;

    AssetClassEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AssetClassEnum fromValue(String input) {
      for (AssetClassEnum b : AssetClassEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("asset_class")
  private AssetClassEnum asset_class = null;

  @JsonProperty("merchant_category_code")
  private String merchant_category_code = null;

  @JsonProperty("receipt_id")
  private String receipt_id = null;

  /**
   * Gets or Sets transaction_type
   */
  public enum TransactionTypeEnum {
    SEND("transaction-type-send"),
    CARD_RECEIVE("transaction-type-card-receive"),
    INTER_LEDGER("transaction-type-inter-ledger"),
    MANUAL_CREDIT("transaction-type-manual-credit"),
    MANUAL_DEBIT("transaction-type-manual-debit"),
    INTER_LEDGER_OMNIBUS("transaction-type-inter-ledger-omnibus"),
    RECEIVE("transaction-type-receive"),
    VIRTUAL_DEBIT_CARD_DEBIT("transaction-type-virtual-debit-card-debit"),
    DEBIT_SEND("transaction-type-debit-send"),
    FX("transaction-type-fx");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TransactionTypeEnum fromValue(String input) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("transaction_type")
  private TransactionTypeEnum transaction_type = null;

  @JsonProperty("card_entry_method")
  private String card_entry_method = null;

  @JsonProperty("beneficiary_id")
  private String beneficiary_id = null;

  /**
   * Gets or Sets payment_type
   */
  public enum PaymentTypeEnum {
    AU_NPP("payment-type-AU-NPP"),
    EU_TARGET2("payment-type-EU-Target2"),
    GLOBAL_SWIFT("payment-type-Global-SWIFT"),
    AU_DE("payment-type-AU-DE"),
    EU_SEPA_INSTANT("payment-type-EU-SEPA-Instant"),
    UK_BACS("payment-type-UK-BACS"),
    US_ACH("payment-type-US-ACH"),
    UK_CHAPS("payment-type-UK-Chaps"),
    CARD("payment-type-card"),
    EU_SEPA_STEP2("payment-type-EU-SEPA-Step2"),
    SG_FAST("payment-type-SG-FAST"),
    VIRTUAL_DEBIT_CARD_DEBIT("payment-type-virtual-debit-card-debit"),
    INTER_LEDGER("payment-type-inter-ledger"),
    UK_FASTERPAYMENTS("payment-type-UK-FasterPayments"),
    FX("payment-type-fx"),
    US_WIRES("payment-type-US-Wires");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PaymentTypeEnum fromValue(String input) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("payment_type")
  private PaymentTypeEnum payment_type = null;

  @JsonProperty("mcc_description")
  private String mcc_description = null;

  @JsonProperty("additional_info")
  private String additional_info = null;

  @JsonProperty("merchantbank_id")
  private String merchantbank_id = null;

  @JsonProperty("return_info")
  private Object return_info = null;

  @JsonProperty("ledger_from_id")
  private String ledger_from_id = null;

  @JsonProperty("daily_unique_refence")
  private String daily_unique_refence = null;

  @JsonProperty("transaction_info")
  private V1customertransactionsTransactionInfo transaction_info = null;

  @JsonProperty("missing_data")
  private List<String> missing_data = null;

  @JsonProperty("point_of_sale_reference")
  private String point_of_sale_reference = null;

  @JsonProperty("transaction_status")
  private String transaction_status = null;

  @JsonProperty("card_expiry_date")
  private String card_expiry_date = null;

  /**
   * Gets or Sets rejection_reasons
   */
  public enum RejectionReasonsEnum {
    ACCOUNT_TRANSFERRED("account-transferred"),
    BENEFICIARY_SORT_CODE_NOT_ENABLED_FOR_FASTER_PAYMENTS("beneficiary-sort-code-not-enabled-for-faster-payments"),
    TRANSACTION_CURRENCY_DIFFERENT_TO_RECEIVER_ACCOUNT("transaction-currency-different-to-receiver-account"),
    BENEFICIARY_SORT_CODE_AND_ACCOUNT_NUMBER_UNKNOWN("beneficiary-sort-code-and-account-number-unknown"),
    BENEFICIARY_ACCOUNT_NUMBER_INVALID("beneficiary-account-number-invalid"),
    BENEFICIARY_NAME_DOES_NOT_MATCH_BENEFICIARY_ACCOUNT("beneficiary-name-does-not-match-beneficiary-account"),
    CURRENCY_AND_AMOUNT_INVALID("currency-and-amount-invalid"),
    SENDING_AGENCY_ACCOUNT_STOPPED("sending-agency-account-stopped"),
    SENDING_ACCOUNT_TRANSFERRED("sending-account-transferred"),
    BENEFICIARY_SORT_CODE_INVALID("beneficiary-sort-code-invalid"),
    AMOUNT_INVALID("amount-invalid"),
    REJECTED_BY_RECEIVING_BANK_WITH_UNSPECIFIED_REASON("rejected-by-receiving-bank-with-unspecified-reason"),
    SENDING_AGENCY_ACCOUNT_CLOSED("sending-agency-account-closed"),
    INSUFFICIENT_FUNDS("insufficient-funds"),
    TRANSACTION_FAILED_CONTACT_BENEFICIARY("transaction-failed-contact-beneficiary"),
    CURRENCY_INVALID("currency-invalid"),
    BENEFICIARY_ACCOUNT_STOPPED("beneficiary-account-stopped"),
    RECEIVING_AGENCY_ACCOUNT_STOPPED("receiving-agency-account-stopped"),
    ACCOUNT_OVERDRAWN("account-overdrawn"),
    RECEIVING_AGENCY_ACCOUNT_CLOSED("receiving-agency-account-closed"),
    ADDITIONAL_REMITTANCE_INFO_INVALID("additional-remittance-info-invalid"),
    BENEFICIARY_NAME_MISSING("beneficiary-name-missing"),
    ACCOUNT_NUMBER_INVALID("account-number-invalid"),
    RECEIVING_ACCOUNT_TRANSFERRED("receiving-account-transferred"),
    RECEIVING_AGENCY_SORT_CODE_AND_ACCOUNT_NUMBER_UNKNOWN("receiving-agency-sort-code-and-account-number-unknown"),
    REFERENCE_INVALID("reference-invalid"),
    TRANSACTION_FAILED_PLEASE_RETRY("transaction-failed-please-retry"),
    TERMS_AND_CONDITIONS_LIMIT("terms-and-conditions-limit"),
    SENDING_AGENCY_SORT_CODE_AND_ACCOUNT_NUMBER_UNKNOWN("sending-agency-sort-code-and-account-number-unknown"),
    TRANSACTION_FAILED("transaction-failed"),
    AMOUNT_EXCEEDS_ACCOUNT_LIMIT("amount-exceeds-account-limit"),
    BENEFICIARY_ACCOUNT_CLOSED("beneficiary-account-closed");

    private String value;

    RejectionReasonsEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RejectionReasonsEnum fromValue(String input) {
      for (RejectionReasonsEnum b : RejectionReasonsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("rejection_reasons")
  private List<RejectionReasonsEnum> rejection_reasons = null;

  @JsonProperty("point_of_sale_country_code")
  private String point_of_sale_country_code = null;

  @JsonProperty("created_at")
  private LocalDateTime created_at = null;

  @JsonProperty("merchant_id")
  private String merchant_id = null;

  /**
   * Gets or Sets partner_product
   */
  public enum PartnerProductEnum {
    EXAMPLEBANK_SGD_2("ExampleBank-SGD-2"),
    PAYRNET_SGD_2("PayrNet-SGD-2"),
    BANKING_AUD_1("Banking-AUD-1"),
    PAYRNET_SGD_1("PayrNet-SGD-1"),
    EXAMPLEBANK_SGD_1("ExampleBank-SGD-1"),
    PAYRNET_GBP_DEBIT_SEND("PayrNet-GBP-Debit-Send"),
    PAYRNET_GBP_2("PayrNet-GBP-2"),
    EXAMPLEBANK_USD_1("ExampleBank-USD-1"),
    RAILSBANK_KYC_4("Railsbank-KYC-4"),
    EXAMPLEBANK_AUD_1("ExampleBank-AUD-1"),
    EXAMPLEBANK_FX_1("ExampleBank-FX-1"),
    PAYRNET_USD_1("PayrNet-USD-1"),
    EXAMPLEBANK_USD_2("ExampleBank-USD-2"),
    EXAMPLEBANK_EUR_3("ExampleBank-EUR-3"),
    RAILSBANK_KYC_1("Railsbank-KYC-1"),
    EXAMPLEBANK_GBP_2("ExampleBank-GBP-2"),
    PAYRNET_MULTI_CCY_1("PayrNet-Multi-CCY-1"),
    RAILSBANK_CREDIT_CARD_1("Railsbank-Credit-Card-1"),
    GOLDBLOC_CONVERSION_1("Goldbloc-Conversion-1"),
    RAILSBANK_AML_SCREENING_1("Railsbank-AML-Screening-1"),
    PAYRNET_EUR_3("PayrNet-EUR-3"),
    RAILSBANK_USD_CREDIT_1("Railsbank-USD-Credit-1"),
    ONFIDO_IDV_1("Onfido-IDV-1"),
    EXAMPLEBANK_EUR_1("ExampleBank-EUR-1"),
    PAYRNET_USD_2("PayrNet-USD-2"),
    RAILSBANK_DEBIT_CARD_3("Railsbank-Debit-Card-3"),
    PAYRNET_EUR_1("PayrNet-EUR-1"),
    RAILSBANK_CONVERSION_1("Railsbank-Conversion-1"),
    PAYRNET_GBP_1("PayrNet-GBP-1"),
    RAILSBANK_DEBIT_CARD_1("Railsbank-Debit-Card-1"),
    RAILSBANK_VIRTUAL_1("Railsbank-Virtual-1"),
    RAILSBANK_KYC_2("Railsbank-KYC-2"),
    EXAMPLEBANK_USD_CREDIT_1("ExampleBank-USD-Credit-1"),
    EXAMPLEBANK_GBP_DEBIT_SEND("ExampleBank-GBP-Debit-Send"),
    EXAMPLEBANK_GBP_1("ExampleBank-GBP-1"),
    RAILSBANK_IDENTITY_AND_VERIFICATION_SERVICE_1("Railsbank-Identity-and-Verification-Service-1"),
    RAILSBANK_DEBIT_CARD_2("Railsbank-Debit-Card-2"),
    PAYRNET_FX_1("PayrNet-FX-1");

    private String value;

    PartnerProductEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PartnerProductEnum fromValue(String input) {
      for (PartnerProductEnum b : PartnerProductEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("partner_product")
  private PartnerProductEnum partner_product = null;

  @JsonProperty("transaction_audit_number")
  private String transaction_audit_number = null;

  @JsonProperty("beneficiary_account_id")
  private String beneficiary_account_id = null;

  @JsonProperty("card_currency")
  private String card_currency = null;

  /**
   * Gets or Sets asset_type
   */
  public enum AssetTypeEnum {
    PLN("pln"),
    AUD("aud"),
    CHF("chf"),
    CAD("cad"),
    SEK("sek"),
    GOLDBLOC("goldbloc"),
    USD("usd"),
    NOK("nok"),
    WHISKY("whisky"),
    VIRTUAL_CURRENCY("virtual-currency"),
    JPY("jpy"),
    HUF("huf"),
    NZD("nzd"),
    GOLD("gold"),
    CZK("czk"),
    SGD("sgd"),
    RON("ron"),
    GBP("gbp"),
    HRK("hrk"),
    EUR("eur");

    private String value;

    AssetTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AssetTypeEnum fromValue(String input) {
      for (AssetTypeEnum b : AssetTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("asset_type")
  private AssetTypeEnum asset_type = null;

  @JsonProperty("conversion_rate")
  private BigDecimal conversion_rate = null;

  @JsonProperty("transaction_currency")
  private String transaction_currency = null;

  @JsonProperty("amount")
  private BigDecimal amount = null;

  @JsonProperty("card_used")
  private String card_used = null;

  @JsonProperty("transaction_fee")
  private BigDecimal transaction_fee = null;

  /**
   * Gets or Sets swift_service_level
   */
  public enum SwiftServiceLevelEnum {
    URGENT_PAYMENT("service-level-urgent-payment"),
    URGENT_PAYMENT_NET_SETTLEMENT("service-level-urgent-payment-net-settlement"),
    BOOK_TRANSACION("service-level-book-transacion"),
    EBA_PRIORITY_SERVICE("service-level-eba-priority-service"),
    SEPA("service-level-sepa"),
    NON_URGENT_PRIORITY_PAYMENT("service-level-non-urgent-priority-payment"),
    SAME_DAY_VALUE("service-level-same-day-value"),
    NON_URGENT_PAYMENT("service-level-non-urgent-payment");

    private String value;

    SwiftServiceLevelEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SwiftServiceLevelEnum fromValue(String input) {
      for (SwiftServiceLevelEnum b : SwiftServiceLevelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("swift_service_level")
  private SwiftServiceLevelEnum swift_service_level = null;

  @JsonProperty("amount_local_currency")
  private BigDecimal amount_local_currency = null;

  /**
   * Gets or Sets swift_charge_bearer
   */
  public enum SwiftChargeBearerEnum {
    CREDITOR("charge-bearer-creditor"),
    SHARED("charge-bearer-shared"),
    SERVICE_LEVEL("charge-bearer-service-level"),
    DEBTOR("charge-bearer-debtor");

    private String value;

    SwiftChargeBearerEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SwiftChargeBearerEnum fromValue(String input) {
      for (SwiftChargeBearerEnum b : SwiftChargeBearerEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("swift_charge_bearer")
  private SwiftChargeBearerEnum swift_charge_bearer = null;

  @JsonProperty("event_group_id")
  private String event_group_id = null;

  @JsonProperty("to")
  private V1customertransactionsTo to = null;

  @JsonProperty("ledger_to_id")
  private String ledger_to_id = null;

  /**
   * Gets or Sets partner_product_fx
   */
  public enum PartnerProductFxEnum {
    EXAMPLEBANK_FX_1("ExampleBank-FX-1"),
    PAYRNET_FX_1("PayrNet-FX-1");

    private String value;

    PartnerProductFxEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PartnerProductFxEnum fromValue(String input) {
      for (PartnerProductFxEnum b : PartnerProductFxEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("partner_product_fx")
  private PartnerProductFxEnum partner_product_fx = null;

  @JsonProperty("transaction_printout")
  private Object transaction_printout = null;

  @JsonProperty("card_transaction_type")
  private String card_transaction_type = null;

  public InlineResponse20064 reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Text the enduser can add to the transaction for the beneficiary
   * @return reason
  **/
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public InlineResponse20064 card_rules_breached(List<String> card_rules_breached) {
    this.card_rules_breached = card_rules_breached;
    return this;
  }

  public InlineResponse20064 addCardRulesBreachedItem(String card_rules_breachedItem) {
    if (this.card_rules_breached == null) {
      this.card_rules_breached = new ArrayList<>();
    }
    this.card_rules_breached.add(card_rules_breachedItem);
    return this;
  }

   /**
   * Get card_rules_breached
   * @return card_rules_breached
  **/
  public List<String> getCardRulesBreached() {
    return card_rules_breached;
  }

  public void setCardRulesBreached(List<String> card_rules_breached) {
    this.card_rules_breached = card_rules_breached;
  }

  public InlineResponse20064 amount_beneficiary_account(BigDecimal amount_beneficiary_account) {
    this.amount_beneficiary_account = amount_beneficiary_account;
    return this;
  }

   /**
   * The amount credited in the receiver&#x27;s account in the target currency
   * @return amount_beneficiary_account
  **/
  public BigDecimal getAmountBeneficiaryAccount() {
    return amount_beneficiary_account;
  }

  public void setAmountBeneficiaryAccount(BigDecimal amount_beneficiary_account) {
    this.amount_beneficiary_account = amount_beneficiary_account;
  }

  public InlineResponse20064 event_group_created_at(LocalDateTime event_group_created_at) {
    this.event_group_created_at = event_group_created_at;
    return this;
  }

   /**
   * Get event_group_created_at
   * @return event_group_created_at
  **/
  public LocalDateTime getEventGroupCreatedAt() {
    return event_group_created_at;
  }

  public void setEventGroupCreatedAt(LocalDateTime event_group_created_at) {
    this.event_group_created_at = event_group_created_at;
  }

  public InlineResponse20064 fixed_side(FixedSideEnum fixed_side) {
    this.fixed_side = fixed_side;
    return this;
  }

   /**
   * Sets the base currency for pair rate direction, which determines how much the base currency is worth as measured against the second currency. It assures if the amount specified will either be debited from the sending ledger or credited in the receiving account
   * @return fixed_side
  **/
  public FixedSideEnum getFixedSide() {
    return fixed_side;
  }

  public void setFixedSide(FixedSideEnum fixed_side) {
    this.fixed_side = fixed_side;
  }

  public InlineResponse20064 reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public InlineResponse20064 amount_ledger_from(BigDecimal amount_ledger_from) {
    this.amount_ledger_from = amount_ledger_from;
    return this;
  }

   /**
   * The amount debited from the sender&#x27;s ledger in the original currency
   * @return amount_ledger_from
  **/
  public BigDecimal getAmountLedgerFrom() {
    return amount_ledger_from;
  }

  public void setAmountLedgerFrom(BigDecimal amount_ledger_from) {
    this.amount_ledger_from = amount_ledger_from;
  }

  public InlineResponse20064 transaction_meta(Object transaction_meta) {
    this.transaction_meta = transaction_meta;
    return this;
  }

   /**
   * An object allowing custom fields that can be created and stored against the transaction
   * @return transaction_meta
  **/
  public Object getTransactionMeta() {
    return transaction_meta;
  }

  public void setTransactionMeta(Object transaction_meta) {
    this.transaction_meta = transaction_meta;
  }

  public InlineResponse20064 invoices(List<V1customertransactionsInvoices> invoices) {
    this.invoices = invoices;
    return this;
  }

  public InlineResponse20064 addInvoicesItem(V1customertransactionsInvoices invoicesItem) {
    if (this.invoices == null) {
      this.invoices = new ArrayList<>();
    }
    this.invoices.add(invoicesItem);
    return this;
  }

   /**
   * Get invoices
   * @return invoices
  **/
  public List<V1customertransactionsInvoices> getInvoices() {
    return invoices;
  }

  public void setInvoices(List<V1customertransactionsInvoices> invoices) {
    this.invoices = invoices;
  }

  public InlineResponse20064 debit_payment_id(String debit_payment_id) {
    this.debit_payment_id = debit_payment_id;
    return this;
  }

   /**
   * Get debit_payment_id
   * @return debit_payment_id
  **/
  public String getDebitPaymentId() {
    return debit_payment_id;
  }

  public void setDebitPaymentId(String debit_payment_id) {
    this.debit_payment_id = debit_payment_id;
  }

  public InlineResponse20064 conversion_date(LocalDate conversion_date) {
    this.conversion_date = conversion_date;
    return this;
  }

   /**
   * Get conversion_date
   * @return conversion_date
  **/
  public LocalDate getConversionDate() {
    return conversion_date;
  }

  public void setConversionDate(LocalDate conversion_date) {
    this.conversion_date = conversion_date;
  }

  public InlineResponse20064 payment_info(Object payment_info) {
    this.payment_info = payment_info;
    return this;
  }

   /**
   * Get payment_info
   * @return payment_info
  **/
  public Object getPaymentInfo() {
    return payment_info;
  }

  public void setPaymentInfo(Object payment_info) {
    this.payment_info = payment_info;
  }

  public InlineResponse20064 point_of_sale_info(String point_of_sale_info) {
    this.point_of_sale_info = point_of_sale_info;
    return this;
  }

   /**
   * Get point_of_sale_info
   * @return point_of_sale_info
  **/
  public String getPointOfSaleInfo() {
    return point_of_sale_info;
  }

  public void setPointOfSaleInfo(String point_of_sale_info) {
    this.point_of_sale_info = point_of_sale_info;
  }

  public InlineResponse20064 payment_method(PaymentMethodEnum payment_method) {
    this.payment_method = payment_method;
    return this;
  }

   /**
   * Sets if transaction will be sent via local (e.g. UKFP) or international (e.g. Swift) payment schemes
   * @return payment_method
  **/
  public PaymentMethodEnum getPaymentMethod() {
    return payment_method;
  }

  public void setPaymentMethod(PaymentMethodEnum payment_method) {
    this.payment_method = payment_method;
  }

  public InlineResponse20064 transaction_id(String transaction_id) {
    this.transaction_id = transaction_id;
    return this;
  }

   /**
   * Get transaction_id
   * @return transaction_id
  **/
  public String getTransactionId() {
    return transaction_id;
  }

  public void setTransactionId(String transaction_id) {
    this.transaction_id = transaction_id;
  }

  public InlineResponse20064 failure_reasons(List<FailureReasonsEnum> failure_reasons) {
    this.failure_reasons = failure_reasons;
    return this;
  }

  public InlineResponse20064 addFailureReasonsItem(FailureReasonsEnum failure_reasonsItem) {
    if (this.failure_reasons == null) {
      this.failure_reasons = new ArrayList<>();
    }
    this.failure_reasons.add(failure_reasonsItem);
    return this;
  }

   /**
   * Get failure_reasons
   * @return failure_reasons
  **/
  public List<FailureReasonsEnum> getFailureReasons() {
    return failure_reasons;
  }

  public void setFailureReasons(List<FailureReasonsEnum> failure_reasons) {
    this.failure_reasons = failure_reasons;
  }

  public InlineResponse20064 merchant_details(String merchant_details) {
    this.merchant_details = merchant_details;
    return this;
  }

   /**
   * Get merchant_details
   * @return merchant_details
  **/
  public String getMerchantDetails() {
    return merchant_details;
  }

  public void setMerchantDetails(String merchant_details) {
    this.merchant_details = merchant_details;
  }

  public InlineResponse20064 settlement_date(LocalDate settlement_date) {
    this.settlement_date = settlement_date;
    return this;
  }

   /**
   * Get settlement_date
   * @return settlement_date
  **/
  public LocalDate getSettlementDate() {
    return settlement_date;
  }

  public void setSettlementDate(LocalDate settlement_date) {
    this.settlement_date = settlement_date;
  }

  public InlineResponse20064 asset_class(AssetClassEnum asset_class) {
    this.asset_class = asset_class;
    return this;
  }

   /**
   * Get asset_class
   * @return asset_class
  **/
  public AssetClassEnum getAssetClass() {
    return asset_class;
  }

  public void setAssetClass(AssetClassEnum asset_class) {
    this.asset_class = asset_class;
  }

  public InlineResponse20064 merchant_category_code(String merchant_category_code) {
    this.merchant_category_code = merchant_category_code;
    return this;
  }

   /**
   * Get merchant_category_code
   * @return merchant_category_code
  **/
  public String getMerchantCategoryCode() {
    return merchant_category_code;
  }

  public void setMerchantCategoryCode(String merchant_category_code) {
    this.merchant_category_code = merchant_category_code;
  }

  public InlineResponse20064 receipt_id(String receipt_id) {
    this.receipt_id = receipt_id;
    return this;
  }

   /**
   * Get receipt_id
   * @return receipt_id
  **/
  public String getReceiptId() {
    return receipt_id;
  }

  public void setReceiptId(String receipt_id) {
    this.receipt_id = receipt_id;
  }

  public InlineResponse20064 transaction_type(TransactionTypeEnum transaction_type) {
    this.transaction_type = transaction_type;
    return this;
  }

   /**
   * Get transaction_type
   * @return transaction_type
  **/
  public TransactionTypeEnum getTransactionType() {
    return transaction_type;
  }

  public void setTransactionType(TransactionTypeEnum transaction_type) {
    this.transaction_type = transaction_type;
  }

  public InlineResponse20064 card_entry_method(String card_entry_method) {
    this.card_entry_method = card_entry_method;
    return this;
  }

   /**
   * Get card_entry_method
   * @return card_entry_method
  **/
  public String getCardEntryMethod() {
    return card_entry_method;
  }

  public void setCardEntryMethod(String card_entry_method) {
    this.card_entry_method = card_entry_method;
  }

  public InlineResponse20064 beneficiary_id(String beneficiary_id) {
    this.beneficiary_id = beneficiary_id;
    return this;
  }

   /**
   * The receiving Railsbank Beneficiary ID
   * @return beneficiary_id
  **/
  public String getBeneficiaryId() {
    return beneficiary_id;
  }

  public void setBeneficiaryId(String beneficiary_id) {
    this.beneficiary_id = beneficiary_id;
  }

  public InlineResponse20064 payment_type(PaymentTypeEnum payment_type) {
    this.payment_type = payment_type;
    return this;
  }

   /**
   * Get payment_type
   * @return payment_type
  **/
  public PaymentTypeEnum getPaymentType() {
    return payment_type;
  }

  public void setPaymentType(PaymentTypeEnum payment_type) {
    this.payment_type = payment_type;
  }

  public InlineResponse20064 mcc_description(String mcc_description) {
    this.mcc_description = mcc_description;
    return this;
  }

   /**
   * Get mcc_description
   * @return mcc_description
  **/
  public String getMccDescription() {
    return mcc_description;
  }

  public void setMccDescription(String mcc_description) {
    this.mcc_description = mcc_description;
  }

  public InlineResponse20064 additional_info(String additional_info) {
    this.additional_info = additional_info;
    return this;
  }

   /**
   * Get additional_info
   * @return additional_info
  **/
  public String getAdditionalInfo() {
    return additional_info;
  }

  public void setAdditionalInfo(String additional_info) {
    this.additional_info = additional_info;
  }

  public InlineResponse20064 merchantbank_id(String merchantbank_id) {
    this.merchantbank_id = merchantbank_id;
    return this;
  }

   /**
   * Get merchantbank_id
   * @return merchantbank_id
  **/
  public String getMerchantbankId() {
    return merchantbank_id;
  }

  public void setMerchantbankId(String merchantbank_id) {
    this.merchantbank_id = merchantbank_id;
  }

  public InlineResponse20064 return_info(Object return_info) {
    this.return_info = return_info;
    return this;
  }

   /**
   * Get return_info
   * @return return_info
  **/
  public Object getReturnInfo() {
    return return_info;
  }

  public void setReturnInfo(Object return_info) {
    this.return_info = return_info;
  }

  public InlineResponse20064 ledger_from_id(String ledger_from_id) {
    this.ledger_from_id = ledger_from_id;
    return this;
  }

   /**
   * The Railsbank Ledger ID to be debited
   * @return ledger_from_id
  **/
  public String getLedgerFromId() {
    return ledger_from_id;
  }

  public void setLedgerFromId(String ledger_from_id) {
    this.ledger_from_id = ledger_from_id;
  }

  public InlineResponse20064 daily_unique_refence(String daily_unique_refence) {
    this.daily_unique_refence = daily_unique_refence;
    return this;
  }

   /**
   * Get daily_unique_refence
   * @return daily_unique_refence
  **/
  public String getDailyUniqueRefence() {
    return daily_unique_refence;
  }

  public void setDailyUniqueRefence(String daily_unique_refence) {
    this.daily_unique_refence = daily_unique_refence;
  }

  public InlineResponse20064 transaction_info(V1customertransactionsTransactionInfo transaction_info) {
    this.transaction_info = transaction_info;
    return this;
  }

   /**
   * Get transaction_info
   * @return transaction_info
  **/
  public V1customertransactionsTransactionInfo getTransactionInfo() {
    return transaction_info;
  }

  public void setTransactionInfo(V1customertransactionsTransactionInfo transaction_info) {
    this.transaction_info = transaction_info;
  }

  public InlineResponse20064 missing_data(List<String> missing_data) {
    this.missing_data = missing_data;
    return this;
  }

  public InlineResponse20064 addMissingDataItem(String missing_dataItem) {
    if (this.missing_data == null) {
      this.missing_data = new ArrayList<>();
    }
    this.missing_data.add(missing_dataItem);
    return this;
  }

   /**
   * Get missing_data
   * @return missing_data
  **/
  public List<String> getMissingData() {
    return missing_data;
  }

  public void setMissingData(List<String> missing_data) {
    this.missing_data = missing_data;
  }

  public InlineResponse20064 point_of_sale_reference(String point_of_sale_reference) {
    this.point_of_sale_reference = point_of_sale_reference;
    return this;
  }

   /**
   * Get point_of_sale_reference
   * @return point_of_sale_reference
  **/
  public String getPointOfSaleReference() {
    return point_of_sale_reference;
  }

  public void setPointOfSaleReference(String point_of_sale_reference) {
    this.point_of_sale_reference = point_of_sale_reference;
  }

  public InlineResponse20064 transaction_status(String transaction_status) {
    this.transaction_status = transaction_status;
    return this;
  }

   /**
   * Get transaction_status
   * @return transaction_status
  **/
  public String getTransactionStatus() {
    return transaction_status;
  }

  public void setTransactionStatus(String transaction_status) {
    this.transaction_status = transaction_status;
  }

  public InlineResponse20064 card_expiry_date(String card_expiry_date) {
    this.card_expiry_date = card_expiry_date;
    return this;
  }

   /**
   * Get card_expiry_date
   * @return card_expiry_date
  **/
  public String getCardExpiryDate() {
    return card_expiry_date;
  }

  public void setCardExpiryDate(String card_expiry_date) {
    this.card_expiry_date = card_expiry_date;
  }

  public InlineResponse20064 rejection_reasons(List<RejectionReasonsEnum> rejection_reasons) {
    this.rejection_reasons = rejection_reasons;
    return this;
  }

  public InlineResponse20064 addRejectionReasonsItem(RejectionReasonsEnum rejection_reasonsItem) {
    if (this.rejection_reasons == null) {
      this.rejection_reasons = new ArrayList<>();
    }
    this.rejection_reasons.add(rejection_reasonsItem);
    return this;
  }

   /**
   * Get rejection_reasons
   * @return rejection_reasons
  **/
  public List<RejectionReasonsEnum> getRejectionReasons() {
    return rejection_reasons;
  }

  public void setRejectionReasons(List<RejectionReasonsEnum> rejection_reasons) {
    this.rejection_reasons = rejection_reasons;
  }

  public InlineResponse20064 point_of_sale_country_code(String point_of_sale_country_code) {
    this.point_of_sale_country_code = point_of_sale_country_code;
    return this;
  }

   /**
   * Get point_of_sale_country_code
   * @return point_of_sale_country_code
  **/
  public String getPointOfSaleCountryCode() {
    return point_of_sale_country_code;
  }

  public void setPointOfSaleCountryCode(String point_of_sale_country_code) {
    this.point_of_sale_country_code = point_of_sale_country_code;
  }

  public InlineResponse20064 created_at(LocalDateTime created_at) {
    this.created_at = created_at;
    return this;
  }

   /**
   * Get created_at
   * @return created_at
  **/
  public LocalDateTime getCreatedAt() {
    return created_at;
  }

  public void setCreatedAt(LocalDateTime created_at) {
    this.created_at = created_at;
  }

  public InlineResponse20064 merchant_id(String merchant_id) {
    this.merchant_id = merchant_id;
    return this;
  }

   /**
   * Get merchant_id
   * @return merchant_id
  **/
  public String getMerchantId() {
    return merchant_id;
  }

  public void setMerchantId(String merchant_id) {
    this.merchant_id = merchant_id;
  }

  public InlineResponse20064 partner_product(PartnerProductEnum partner_product) {
    this.partner_product = partner_product;
    return this;
  }

   /**
   * Get partner_product
   * @return partner_product
  **/
  public PartnerProductEnum getPartnerProduct() {
    return partner_product;
  }

  public void setPartnerProduct(PartnerProductEnum partner_product) {
    this.partner_product = partner_product;
  }

  public InlineResponse20064 transaction_audit_number(String transaction_audit_number) {
    this.transaction_audit_number = transaction_audit_number;
    return this;
  }

   /**
   * Get transaction_audit_number
   * @return transaction_audit_number
  **/
  public String getTransactionAuditNumber() {
    return transaction_audit_number;
  }

  public void setTransactionAuditNumber(String transaction_audit_number) {
    this.transaction_audit_number = transaction_audit_number;
  }

  public InlineResponse20064 beneficiary_account_id(String beneficiary_account_id) {
    this.beneficiary_account_id = beneficiary_account_id;
    return this;
  }

   /**
   * The Railsbank Beneficiary account ID to be credited. This needs to be set only when sending to an account that isn&#x27;t the beneficiary&#x27;s default
   * @return beneficiary_account_id
  **/
  public String getBeneficiaryAccountId() {
    return beneficiary_account_id;
  }

  public void setBeneficiaryAccountId(String beneficiary_account_id) {
    this.beneficiary_account_id = beneficiary_account_id;
  }

  public InlineResponse20064 card_currency(String card_currency) {
    this.card_currency = card_currency;
    return this;
  }

   /**
   * Get card_currency
   * @return card_currency
  **/
  public String getCardCurrency() {
    return card_currency;
  }

  public void setCardCurrency(String card_currency) {
    this.card_currency = card_currency;
  }

  public InlineResponse20064 asset_type(AssetTypeEnum asset_type) {
    this.asset_type = asset_type;
    return this;
  }

   /**
   * Get asset_type
   * @return asset_type
  **/
  public AssetTypeEnum getAssetType() {
    return asset_type;
  }

  public void setAssetType(AssetTypeEnum asset_type) {
    this.asset_type = asset_type;
  }

  public InlineResponse20064 conversion_rate(BigDecimal conversion_rate) {
    this.conversion_rate = conversion_rate;
    return this;
  }

   /**
   * Get conversion_rate
   * @return conversion_rate
  **/
  public BigDecimal getConversionRate() {
    return conversion_rate;
  }

  public void setConversionRate(BigDecimal conversion_rate) {
    this.conversion_rate = conversion_rate;
  }

  public InlineResponse20064 transaction_currency(String transaction_currency) {
    this.transaction_currency = transaction_currency;
    return this;
  }

   /**
   * Get transaction_currency
   * @return transaction_currency
  **/
  public String getTransactionCurrency() {
    return transaction_currency;
  }

  public void setTransactionCurrency(String transaction_currency) {
    this.transaction_currency = transaction_currency;
  }

  public InlineResponse20064 amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public InlineResponse20064 card_used(String card_used) {
    this.card_used = card_used;
    return this;
  }

   /**
   * Get card_used
   * @return card_used
  **/
  public String getCardUsed() {
    return card_used;
  }

  public void setCardUsed(String card_used) {
    this.card_used = card_used;
  }

  public InlineResponse20064 transaction_fee(BigDecimal transaction_fee) {
    this.transaction_fee = transaction_fee;
    return this;
  }

   /**
   * Get transaction_fee
   * @return transaction_fee
  **/
  public BigDecimal getTransactionFee() {
    return transaction_fee;
  }

  public void setTransactionFee(BigDecimal transaction_fee) {
    this.transaction_fee = transaction_fee;
  }

  public InlineResponse20064 swift_service_level(SwiftServiceLevelEnum swift_service_level) {
    this.swift_service_level = swift_service_level;
    return this;
  }

   /**
   * Get swift_service_level
   * @return swift_service_level
  **/
  public SwiftServiceLevelEnum getSwiftServiceLevel() {
    return swift_service_level;
  }

  public void setSwiftServiceLevel(SwiftServiceLevelEnum swift_service_level) {
    this.swift_service_level = swift_service_level;
  }

  public InlineResponse20064 amount_local_currency(BigDecimal amount_local_currency) {
    this.amount_local_currency = amount_local_currency;
    return this;
  }

   /**
   * Get amount_local_currency
   * @return amount_local_currency
  **/
  public BigDecimal getAmountLocalCurrency() {
    return amount_local_currency;
  }

  public void setAmountLocalCurrency(BigDecimal amount_local_currency) {
    this.amount_local_currency = amount_local_currency;
  }

  public InlineResponse20064 swift_charge_bearer(SwiftChargeBearerEnum swift_charge_bearer) {
    this.swift_charge_bearer = swift_charge_bearer;
    return this;
  }

   /**
   * Get swift_charge_bearer
   * @return swift_charge_bearer
  **/
  public SwiftChargeBearerEnum getSwiftChargeBearer() {
    return swift_charge_bearer;
  }

  public void setSwiftChargeBearer(SwiftChargeBearerEnum swift_charge_bearer) {
    this.swift_charge_bearer = swift_charge_bearer;
  }

  public InlineResponse20064 event_group_id(String event_group_id) {
    this.event_group_id = event_group_id;
    return this;
  }

   /**
   * Get event_group_id
   * @return event_group_id
  **/
  public String getEventGroupId() {
    return event_group_id;
  }

  public void setEventGroupId(String event_group_id) {
    this.event_group_id = event_group_id;
  }

  public InlineResponse20064 to(V1customertransactionsTo to) {
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  public V1customertransactionsTo getTo() {
    return to;
  }

  public void setTo(V1customertransactionsTo to) {
    this.to = to;
  }

  public InlineResponse20064 ledger_to_id(String ledger_to_id) {
    this.ledger_to_id = ledger_to_id;
    return this;
  }

   /**
   * Get ledger_to_id
   * @return ledger_to_id
  **/
  public String getLedgerToId() {
    return ledger_to_id;
  }

  public void setLedgerToId(String ledger_to_id) {
    this.ledger_to_id = ledger_to_id;
  }

  public InlineResponse20064 partner_product_fx(PartnerProductFxEnum partner_product_fx) {
    this.partner_product_fx = partner_product_fx;
    return this;
  }

   /**
   * Get partner_product_fx
   * @return partner_product_fx
  **/
  public PartnerProductFxEnum getPartnerProductFx() {
    return partner_product_fx;
  }

  public void setPartnerProductFx(PartnerProductFxEnum partner_product_fx) {
    this.partner_product_fx = partner_product_fx;
  }

  public InlineResponse20064 transaction_printout(Object transaction_printout) {
    this.transaction_printout = transaction_printout;
    return this;
  }

   /**
   * Get transaction_printout
   * @return transaction_printout
  **/
  public Object getTransactionPrintout() {
    return transaction_printout;
  }

  public void setTransactionPrintout(Object transaction_printout) {
    this.transaction_printout = transaction_printout;
  }

  public InlineResponse20064 card_transaction_type(String card_transaction_type) {
    this.card_transaction_type = card_transaction_type;
    return this;
  }

   /**
   * Get card_transaction_type
   * @return card_transaction_type
  **/
  public String getCardTransactionType() {
    return card_transaction_type;
  }

  public void setCardTransactionType(String card_transaction_type) {
    this.card_transaction_type = card_transaction_type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20064 inline_response_200_64 = (InlineResponse20064) o;
    return Objects.equals(this.reason, inline_response_200_64.reason) &&
        Objects.equals(this.card_rules_breached, inline_response_200_64.card_rules_breached) &&
        Objects.equals(this.amount_beneficiary_account, inline_response_200_64.amount_beneficiary_account) &&
        Objects.equals(this.event_group_created_at, inline_response_200_64.event_group_created_at) &&
        Objects.equals(this.fixed_side, inline_response_200_64.fixed_side) &&
        Objects.equals(this.reference, inline_response_200_64.reference) &&
        Objects.equals(this.amount_ledger_from, inline_response_200_64.amount_ledger_from) &&
        Objects.equals(this.transaction_meta, inline_response_200_64.transaction_meta) &&
        Objects.equals(this.invoices, inline_response_200_64.invoices) &&
        Objects.equals(this.debit_payment_id, inline_response_200_64.debit_payment_id) &&
        Objects.equals(this.conversion_date, inline_response_200_64.conversion_date) &&
        Objects.equals(this.payment_info, inline_response_200_64.payment_info) &&
        Objects.equals(this.point_of_sale_info, inline_response_200_64.point_of_sale_info) &&
        Objects.equals(this.payment_method, inline_response_200_64.payment_method) &&
        Objects.equals(this.transaction_id, inline_response_200_64.transaction_id) &&
        Objects.equals(this.failure_reasons, inline_response_200_64.failure_reasons) &&
        Objects.equals(this.merchant_details, inline_response_200_64.merchant_details) &&
        Objects.equals(this.settlement_date, inline_response_200_64.settlement_date) &&
        Objects.equals(this.asset_class, inline_response_200_64.asset_class) &&
        Objects.equals(this.merchant_category_code, inline_response_200_64.merchant_category_code) &&
        Objects.equals(this.receipt_id, inline_response_200_64.receipt_id) &&
        Objects.equals(this.transaction_type, inline_response_200_64.transaction_type) &&
        Objects.equals(this.card_entry_method, inline_response_200_64.card_entry_method) &&
        Objects.equals(this.beneficiary_id, inline_response_200_64.beneficiary_id) &&
        Objects.equals(this.payment_type, inline_response_200_64.payment_type) &&
        Objects.equals(this.mcc_description, inline_response_200_64.mcc_description) &&
        Objects.equals(this.additional_info, inline_response_200_64.additional_info) &&
        Objects.equals(this.merchantbank_id, inline_response_200_64.merchantbank_id) &&
        Objects.equals(this.return_info, inline_response_200_64.return_info) &&
        Objects.equals(this.ledger_from_id, inline_response_200_64.ledger_from_id) &&
        Objects.equals(this.daily_unique_refence, inline_response_200_64.daily_unique_refence) &&
        Objects.equals(this.transaction_info, inline_response_200_64.transaction_info) &&
        Objects.equals(this.missing_data, inline_response_200_64.missing_data) &&
        Objects.equals(this.point_of_sale_reference, inline_response_200_64.point_of_sale_reference) &&
        Objects.equals(this.transaction_status, inline_response_200_64.transaction_status) &&
        Objects.equals(this.card_expiry_date, inline_response_200_64.card_expiry_date) &&
        Objects.equals(this.rejection_reasons, inline_response_200_64.rejection_reasons) &&
        Objects.equals(this.point_of_sale_country_code, inline_response_200_64.point_of_sale_country_code) &&
        Objects.equals(this.created_at, inline_response_200_64.created_at) &&
        Objects.equals(this.merchant_id, inline_response_200_64.merchant_id) &&
        Objects.equals(this.partner_product, inline_response_200_64.partner_product) &&
        Objects.equals(this.transaction_audit_number, inline_response_200_64.transaction_audit_number) &&
        Objects.equals(this.beneficiary_account_id, inline_response_200_64.beneficiary_account_id) &&
        Objects.equals(this.card_currency, inline_response_200_64.card_currency) &&
        Objects.equals(this.asset_type, inline_response_200_64.asset_type) &&
        Objects.equals(this.conversion_rate, inline_response_200_64.conversion_rate) &&
        Objects.equals(this.transaction_currency, inline_response_200_64.transaction_currency) &&
        Objects.equals(this.amount, inline_response_200_64.amount) &&
        Objects.equals(this.card_used, inline_response_200_64.card_used) &&
        Objects.equals(this.transaction_fee, inline_response_200_64.transaction_fee) &&
        Objects.equals(this.swift_service_level, inline_response_200_64.swift_service_level) &&
        Objects.equals(this.amount_local_currency, inline_response_200_64.amount_local_currency) &&
        Objects.equals(this.swift_charge_bearer, inline_response_200_64.swift_charge_bearer) &&
        Objects.equals(this.event_group_id, inline_response_200_64.event_group_id) &&
        Objects.equals(this.to, inline_response_200_64.to) &&
        Objects.equals(this.ledger_to_id, inline_response_200_64.ledger_to_id) &&
        Objects.equals(this.partner_product_fx, inline_response_200_64.partner_product_fx) &&
        Objects.equals(this.transaction_printout, inline_response_200_64.transaction_printout) &&
        Objects.equals(this.card_transaction_type, inline_response_200_64.card_transaction_type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, card_rules_breached, amount_beneficiary_account, event_group_created_at, fixed_side, reference, amount_ledger_from, transaction_meta, invoices, debit_payment_id, conversion_date, payment_info, point_of_sale_info, payment_method, transaction_id, failure_reasons, merchant_details, settlement_date, asset_class, merchant_category_code, receipt_id, transaction_type, card_entry_method, beneficiary_id, payment_type, mcc_description, additional_info, merchantbank_id, return_info, ledger_from_id, daily_unique_refence, transaction_info, missing_data, point_of_sale_reference, transaction_status, card_expiry_date, rejection_reasons, point_of_sale_country_code, created_at, merchant_id, partner_product, transaction_audit_number, beneficiary_account_id, card_currency, asset_type, conversion_rate, transaction_currency, amount, card_used, transaction_fee, swift_service_level, amount_local_currency, swift_charge_bearer, event_group_id, to, ledger_to_id, partner_product_fx, transaction_printout, card_transaction_type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20064 {\n");
    
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    card_rules_breached: ").append(toIndentedString(card_rules_breached)).append("\n");
    sb.append("    amount_beneficiary_account: ").append(toIndentedString(amount_beneficiary_account)).append("\n");
    sb.append("    event_group_created_at: ").append(toIndentedString(event_group_created_at)).append("\n");
    sb.append("    fixed_side: ").append(toIndentedString(fixed_side)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    amount_ledger_from: ").append(toIndentedString(amount_ledger_from)).append("\n");
    sb.append("    transaction_meta: ").append(toIndentedString(transaction_meta)).append("\n");
    sb.append("    invoices: ").append(toIndentedString(invoices)).append("\n");
    sb.append("    debit_payment_id: ").append(toIndentedString(debit_payment_id)).append("\n");
    sb.append("    conversion_date: ").append(toIndentedString(conversion_date)).append("\n");
    sb.append("    payment_info: ").append(toIndentedString(payment_info)).append("\n");
    sb.append("    point_of_sale_info: ").append(toIndentedString(point_of_sale_info)).append("\n");
    sb.append("    payment_method: ").append(toIndentedString(payment_method)).append("\n");
    sb.append("    transaction_id: ").append(toIndentedString(transaction_id)).append("\n");
    sb.append("    failure_reasons: ").append(toIndentedString(failure_reasons)).append("\n");
    sb.append("    merchant_details: ").append(toIndentedString(merchant_details)).append("\n");
    sb.append("    settlement_date: ").append(toIndentedString(settlement_date)).append("\n");
    sb.append("    asset_class: ").append(toIndentedString(asset_class)).append("\n");
    sb.append("    merchant_category_code: ").append(toIndentedString(merchant_category_code)).append("\n");
    sb.append("    receipt_id: ").append(toIndentedString(receipt_id)).append("\n");
    sb.append("    transaction_type: ").append(toIndentedString(transaction_type)).append("\n");
    sb.append("    card_entry_method: ").append(toIndentedString(card_entry_method)).append("\n");
    sb.append("    beneficiary_id: ").append(toIndentedString(beneficiary_id)).append("\n");
    sb.append("    payment_type: ").append(toIndentedString(payment_type)).append("\n");
    sb.append("    mcc_description: ").append(toIndentedString(mcc_description)).append("\n");
    sb.append("    additional_info: ").append(toIndentedString(additional_info)).append("\n");
    sb.append("    merchantbank_id: ").append(toIndentedString(merchantbank_id)).append("\n");
    sb.append("    return_info: ").append(toIndentedString(return_info)).append("\n");
    sb.append("    ledger_from_id: ").append(toIndentedString(ledger_from_id)).append("\n");
    sb.append("    daily_unique_refence: ").append(toIndentedString(daily_unique_refence)).append("\n");
    sb.append("    transaction_info: ").append(toIndentedString(transaction_info)).append("\n");
    sb.append("    missing_data: ").append(toIndentedString(missing_data)).append("\n");
    sb.append("    point_of_sale_reference: ").append(toIndentedString(point_of_sale_reference)).append("\n");
    sb.append("    transaction_status: ").append(toIndentedString(transaction_status)).append("\n");
    sb.append("    card_expiry_date: ").append(toIndentedString(card_expiry_date)).append("\n");
    sb.append("    rejection_reasons: ").append(toIndentedString(rejection_reasons)).append("\n");
    sb.append("    point_of_sale_country_code: ").append(toIndentedString(point_of_sale_country_code)).append("\n");
    sb.append("    created_at: ").append(toIndentedString(created_at)).append("\n");
    sb.append("    merchant_id: ").append(toIndentedString(merchant_id)).append("\n");
    sb.append("    partner_product: ").append(toIndentedString(partner_product)).append("\n");
    sb.append("    transaction_audit_number: ").append(toIndentedString(transaction_audit_number)).append("\n");
    sb.append("    beneficiary_account_id: ").append(toIndentedString(beneficiary_account_id)).append("\n");
    sb.append("    card_currency: ").append(toIndentedString(card_currency)).append("\n");
    sb.append("    asset_type: ").append(toIndentedString(asset_type)).append("\n");
    sb.append("    conversion_rate: ").append(toIndentedString(conversion_rate)).append("\n");
    sb.append("    transaction_currency: ").append(toIndentedString(transaction_currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    card_used: ").append(toIndentedString(card_used)).append("\n");
    sb.append("    transaction_fee: ").append(toIndentedString(transaction_fee)).append("\n");
    sb.append("    swift_service_level: ").append(toIndentedString(swift_service_level)).append("\n");
    sb.append("    amount_local_currency: ").append(toIndentedString(amount_local_currency)).append("\n");
    sb.append("    swift_charge_bearer: ").append(toIndentedString(swift_charge_bearer)).append("\n");
    sb.append("    event_group_id: ").append(toIndentedString(event_group_id)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    ledger_to_id: ").append(toIndentedString(ledger_to_id)).append("\n");
    sb.append("    partner_product_fx: ").append(toIndentedString(partner_product_fx)).append("\n");
    sb.append("    transaction_printout: ").append(toIndentedString(transaction_printout)).append("\n");
    sb.append("    card_transaction_type: ").append(toIndentedString(card_transaction_type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
