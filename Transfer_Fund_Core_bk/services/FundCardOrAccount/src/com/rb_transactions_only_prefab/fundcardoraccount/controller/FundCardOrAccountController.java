package com.rb_transactions_only_prefab.fundcardoraccount.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.rb_transactions_only_prefab.fundcardoraccount.FundCardOrAccount;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;

/**
 * Controller object for domain model class {@link FundCardOrAccount}.
 * @see FundCardOrAccount
 */
@RestController
@Api(value = "FundCardOrAccountController", description = "controller class for java service execution")
@RequestMapping("/fundCardOrAccount")
public class FundCardOrAccountController {

    @Autowired
    private FundCardOrAccount fundCardOrAccount;

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/fundManagedCards", method = RequestMethod.POST)
    public Object fundManagedCards(@RequestParam(value = "hostName", required = false) String hostName, @RequestHeader(value = "authorization", required = false) String authorization, @RequestBody Map<String, Object> formData,  HttpServletRequest servletRequest) throws IOException {
        return fundCardOrAccount.fundManagedCards(hostName, authorization, formData, servletRequest);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/allManagedaccountsOrLedgers", method = RequestMethod.GET)
    public List getAllManagedAccountsOrLedgers(@RequestParam(value = "hostName", required = false) String hostName, @RequestHeader(value = "authorization", required = false) String authorization, @RequestParam(value = "profileOrUserId", required = false) String profileOrUserId,  HttpServletRequest servletRequest) throws IOException {
        return fundCardOrAccount.getAllManagedAccountsOrLedgers(hostName, authorization, profileOrUserId, servletRequest);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/allManagedCardsOrBeneficiaries", method = RequestMethod.GET)
    public List getAllManagedCardsOrBeneficiaries(@RequestParam(value = "hostName", required = false) String hostName, @RequestHeader(value = "authorization", required = false) String authorization, @RequestParam(value = "profileOrUserId", required = false) String profileOrUserId,  HttpServletRequest servletRequest) throws IOException {
        return fundCardOrAccount.getAllManagedCardsOrBeneficiaries(hostName, authorization, profileOrUserId, servletRequest);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/managedAccountDetailsById", method = RequestMethod.GET)
    public Object getManagedAccountDetailsById(@RequestParam(value = "hostName", required = false) String hostName, @RequestHeader(value = "authorization", required = false) String authorization, @RequestParam(value = "managedAccountId", required = false) String managedAccountId,  HttpServletRequest servletRequest) throws IOException {
        return fundCardOrAccount.getManagedAccountDetailsById(hostName, authorization, managedAccountId, servletRequest);
    }
}

