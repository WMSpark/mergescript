/*
 * Bankable API
 * Bankable API description
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.BNKTransfer.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.transfer_funds.BNKTransfer.model.CardholderupdateCardholder;
/**
 * CardOrderBody
 */

public class CardOrderBody {
  @JsonProperty("load_curr")
  private String load_curr = null;

  @JsonProperty("expiry_renew")
  private Integer expiry_renew = null;

  @JsonProperty("profile")
  private String profile = null;

  @JsonProperty("virtual_account_ref")
  private String virtual_account_ref = null;

  @JsonProperty("market_id")
  private String market_id = null;

  @JsonProperty("wallet_client_code")
  private String wallet_client_code = null;

  @JsonProperty("entity_id")
  private String entity_id = null;

  @JsonProperty("card_type")
  private String card_type = null;

  @JsonProperty("cardholder")
  private CardholderupdateCardholder cardholder = null;

  @JsonProperty("ch_client_code")
  private String ch_client_code = null;

  @JsonProperty("deny_mcc")
  private String deny_mcc = null;

  @JsonProperty("load_amount")
  private String load_amount = null;

  @JsonProperty("card_line_4")
  private String card_line_4 = null;

  @JsonProperty("validity_months")
  private Object validity_months = null;

  @JsonProperty("design_id")
  private String design_id = null;

  @JsonProperty("new_pin")
  private Object new_pin = null;

  @JsonProperty("corporate_id")
  private String corporate_id = null;

  @JsonProperty("product_id")
  private String product_id = null;

  @JsonProperty("card_name")
  private String card_name = null;

  @JsonProperty("deny_service")
  private String deny_service = null;

  @JsonProperty("image_id")
  private String image_id = null;

  public CardOrderBody load_curr(String load_curr) {
    this.load_curr = load_curr;
    return this;
  }

   /**
   * Currency code of the virtual account. ISO 3 characters code. Mandatory if virtual_account_ref is provided but only for virtual cards.
   * @return load_curr
  **/
  public String getLoadCurr() {
    return load_curr;
  }

  public void setLoadCurr(String load_curr) {
    this.load_curr = load_curr;
  }

  public CardOrderBody expiry_renew(Integer expiry_renew) {
    this.expiry_renew = expiry_renew;
    return this;
  }

   /**
   *  0: do not renew at card expiration 1: automatic renewal at card expiration
   * @return expiry_renew
  **/
  public Integer getExpiryRenew() {
    return expiry_renew;
  }

  public void setExpiryRenew(Integer expiry_renew) {
    this.expiry_renew = expiry_renew;
  }

  public CardOrderBody profile(String profile) {
    this.profile = profile;
    return this;
  }

   /**
   * Profile of limits, velocities, and fees of the virtual account. Not available on all packages.
   * @return profile
  **/
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }

  public CardOrderBody virtual_account_ref(String virtual_account_ref) {
    this.virtual_account_ref = virtual_account_ref;
    return this;
  }

   /**
   * Reference ID of the virtual account
   * @return virtual_account_ref
  **/
  public String getVirtualAccountRef() {
    return virtual_account_ref;
  }

  public void setVirtualAccountRef(String virtual_account_ref) {
    this.virtual_account_ref = virtual_account_ref;
  }

  public CardOrderBody market_id(String market_id) {
    this.market_id = market_id;
    return this;
  }

   /**
   * Market reference of the card.
   * @return market_id
  **/
  public String getMarketId() {
    return market_id;
  }

  public void setMarketId(String market_id) {
    this.market_id = market_id;
  }

  public CardOrderBody wallet_client_code(String wallet_client_code) {
    this.wallet_client_code = wallet_client_code;
    return this;
  }

   /**
   * Code of the account to be used to authorise transactions against. The virtual account reference linked to the debit card. Not available on all the markets.
   * @return wallet_client_code
  **/
  public String getWalletClientCode() {
    return wallet_client_code;
  }

  public void setWalletClientCode(String wallet_client_code) {
    this.wallet_client_code = wallet_client_code;
  }

  public CardOrderBody entity_id(String entity_id) {
    this.entity_id = entity_id;
    return this;
  }

   /**
   * Identity of the client
   * @return entity_id
  **/
  public String getEntityId() {
    return entity_id;
  }

  public void setEntityId(String entity_id) {
    this.entity_id = entity_id;
  }

  public CardOrderBody card_type(String card_type) {
    this.card_type = card_type;
    return this;
  }

   /**
   * V (uppercase V) for virtual P (uppercase P) for physical
   * @return card_type
  **/
  public String getCardType() {
    return card_type;
  }

  public void setCardType(String card_type) {
    this.card_type = card_type;
  }

  public CardOrderBody cardholder(CardholderupdateCardholder cardholder) {
    this.cardholder = cardholder;
    return this;
  }

   /**
   * Get cardholder
   * @return cardholder
  **/
  public CardholderupdateCardholder getCardholder() {
    return cardholder;
  }

  public void setCardholder(CardholderupdateCardholder cardholder) {
    this.cardholder = cardholder;
  }

  public CardOrderBody ch_client_code(String ch_client_code) {
    this.ch_client_code = ch_client_code;
    return this;
  }

   /**
   * Unique identifier of a consumer. If this field is provided, the virtual account will be trated as a consumer account, belonging to a consumer of the corporation with provided corporate_id.
   * @return ch_client_code
  **/
  public String getChClientCode() {
    return ch_client_code;
  }

  public void setChClientCode(String ch_client_code) {
    this.ch_client_code = ch_client_code;
  }

  public CardOrderBody deny_mcc(String deny_mcc) {
    this.deny_mcc = deny_mcc;
    return this;
  }

   /**
   * Comma separated list of MCC codes that should be denied. To define a range of MCC, separate the first and last MCC by a minus. Not available on all the markets
   * @return deny_mcc
  **/
  public String getDenyMcc() {
    return deny_mcc;
  }

  public void setDenyMcc(String deny_mcc) {
    this.deny_mcc = deny_mcc;
  }

  public CardOrderBody load_amount(String load_amount) {
    this.load_amount = load_amount;
    return this;
  }

   /**
   * Amount from the virtual account to load onto the card. Decimal separator: \&quot;.\&quot; (point) Thousand separator: none Mandatory if virtual_account_ref is provided. Only for Virtual Cards
   * @return load_amount
  **/
  public String getLoadAmount() {
    return load_amount;
  }

  public void setLoadAmount(String load_amount) {
    this.load_amount = load_amount;
  }

  public CardOrderBody card_line_4(String card_line_4) {
    this.card_line_4 = card_line_4;
    return this;
  }

   /**
   * Free text field. For line 4 variable data. A regular expression for control will put in place.
   * @return card_line_4
  **/
  public String getCardLine4() {
    return card_line_4;
  }

  public void setCardLine4(String card_line_4) {
    this.card_line_4 = card_line_4;
  }

  public CardOrderBody validity_months(Object validity_months) {
    this.validity_months = validity_months;
    return this;
  }

   /**
   * Get validity_months
   * @return validity_months
  **/
  public Object getValidityMonths() {
    return validity_months;
  }

  public void setValidityMonths(Object validity_months) {
    this.validity_months = validity_months;
  }

  public CardOrderBody design_id(String design_id) {
    this.design_id = design_id;
    return this;
  }

   /**
   * The card design reference of the card that is being created. The relevant designs will be provided by Bankable.
   * @return design_id
  **/
  public String getDesignId() {
    return design_id;
  }

  public void setDesignId(String design_id) {
    this.design_id = design_id;
  }

  public CardOrderBody new_pin(Object new_pin) {
    this.new_pin = new_pin;
    return this;
  }

   /**
   * Get new_pin
   * @return new_pin
  **/
  public Object getNewPin() {
    return new_pin;
  }

  public void setNewPin(Object new_pin) {
    this.new_pin = new_pin;
  }

  public CardOrderBody corporate_id(String corporate_id) {
    this.corporate_id = corporate_id;
    return this;
  }

   /**
   * Corporate Identity. If set, the future virtual account will be attached to the corporate. Otherwise, it will be attached to the default coporate of the distributor. Every virtual account that gets created will be associated to a corporate Identity.
   * @return corporate_id
  **/
  public String getCorporateId() {
    return corporate_id;
  }

  public void setCorporateId(String corporate_id) {
    this.corporate_id = corporate_id;
  }

  public CardOrderBody product_id(String product_id) {
    this.product_id = product_id;
    return this;
  }

   /**
   * Product reference
   * @return product_id
  **/
  public String getProductId() {
    return product_id;
  }

  public void setProductId(String product_id) {
    this.product_id = product_id;
  }

  public CardOrderBody card_name(String card_name) {
    this.card_name = card_name;
    return this;
  }

   /**
   * The name to appear on the card. If omitted then the card name will be composed by: &lt;first_name&gt;&lt;&gt;&lt;last_name&gt; or if abbreviation is needed &lt;first letter of first_name&gt;&lt;&gt;&lt;last_name&gt;. The field length can vary depending on the card design and is also restricted to a maximum of 21 if the provider is Marqeta.
   * @return card_name
  **/
  public String getCardName() {
    return card_name;
  }

  public void setCardName(String card_name) {
    this.card_name = card_name;
  }

  public CardOrderBody deny_service(String deny_service) {
    this.deny_service = deny_service;
    return this;
  }

   /**
   * Comma separated list of services (authorisation transaction types) that should be denied for the card: 0 - Sale (Goods &amp; services) 1 - Cash 9 - Sale with cashback Not available on all markets
   * @return deny_service
  **/
  public String getDenyService() {
    return deny_service;
  }

  public void setDenyService(String deny_service) {
    this.deny_service = deny_service;
  }

  public CardOrderBody image_id(String image_id) {
    this.image_id = image_id;
    return this;
  }

   /**
   * ID of a predefined image
   * @return image_id
  **/
  public String getImageId() {
    return image_id;
  }

  public void setImageId(String image_id) {
    this.image_id = image_id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardOrderBody card_order_body = (CardOrderBody) o;
    return Objects.equals(this.load_curr, card_order_body.load_curr) &&
        Objects.equals(this.expiry_renew, card_order_body.expiry_renew) &&
        Objects.equals(this.profile, card_order_body.profile) &&
        Objects.equals(this.virtual_account_ref, card_order_body.virtual_account_ref) &&
        Objects.equals(this.market_id, card_order_body.market_id) &&
        Objects.equals(this.wallet_client_code, card_order_body.wallet_client_code) &&
        Objects.equals(this.entity_id, card_order_body.entity_id) &&
        Objects.equals(this.card_type, card_order_body.card_type) &&
        Objects.equals(this.cardholder, card_order_body.cardholder) &&
        Objects.equals(this.ch_client_code, card_order_body.ch_client_code) &&
        Objects.equals(this.deny_mcc, card_order_body.deny_mcc) &&
        Objects.equals(this.load_amount, card_order_body.load_amount) &&
        Objects.equals(this.card_line_4, card_order_body.card_line_4) &&
        Objects.equals(this.validity_months, card_order_body.validity_months) &&
        Objects.equals(this.design_id, card_order_body.design_id) &&
        Objects.equals(this.new_pin, card_order_body.new_pin) &&
        Objects.equals(this.corporate_id, card_order_body.corporate_id) &&
        Objects.equals(this.product_id, card_order_body.product_id) &&
        Objects.equals(this.card_name, card_order_body.card_name) &&
        Objects.equals(this.deny_service, card_order_body.deny_service) &&
        Objects.equals(this.image_id, card_order_body.image_id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(load_curr, expiry_renew, profile, virtual_account_ref, market_id, wallet_client_code, entity_id, card_type, cardholder, ch_client_code, deny_mcc, load_amount, card_line_4, validity_months, design_id, new_pin, corporate_id, product_id, card_name, deny_service, image_id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardOrderBody {\n");
    
    sb.append("    load_curr: ").append(toIndentedString(load_curr)).append("\n");
    sb.append("    expiry_renew: ").append(toIndentedString(expiry_renew)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    virtual_account_ref: ").append(toIndentedString(virtual_account_ref)).append("\n");
    sb.append("    market_id: ").append(toIndentedString(market_id)).append("\n");
    sb.append("    wallet_client_code: ").append(toIndentedString(wallet_client_code)).append("\n");
    sb.append("    entity_id: ").append(toIndentedString(entity_id)).append("\n");
    sb.append("    card_type: ").append(toIndentedString(card_type)).append("\n");
    sb.append("    cardholder: ").append(toIndentedString(cardholder)).append("\n");
    sb.append("    ch_client_code: ").append(toIndentedString(ch_client_code)).append("\n");
    sb.append("    deny_mcc: ").append(toIndentedString(deny_mcc)).append("\n");
    sb.append("    load_amount: ").append(toIndentedString(load_amount)).append("\n");
    sb.append("    card_line_4: ").append(toIndentedString(card_line_4)).append("\n");
    sb.append("    validity_months: ").append(toIndentedString(validity_months)).append("\n");
    sb.append("    design_id: ").append(toIndentedString(design_id)).append("\n");
    sb.append("    new_pin: ").append(toIndentedString(new_pin)).append("\n");
    sb.append("    corporate_id: ").append(toIndentedString(corporate_id)).append("\n");
    sb.append("    product_id: ").append(toIndentedString(product_id)).append("\n");
    sb.append("    card_name: ").append(toIndentedString(card_name)).append("\n");
    sb.append("    deny_service: ").append(toIndentedString(deny_service)).append("\n");
    sb.append("    image_id: ").append(toIndentedString(image_id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
