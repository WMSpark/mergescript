/*
 * Bankable API
 * Bankable API description
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.BNKTransfer.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
/**
 * VirtualaccountPaymentBody
 */

public class VirtualaccountPaymentBody {
  @JsonProperty("account_number")
  private String account_number = null;

  @JsonProperty("amount")
  private String amount = null;

  @JsonProperty("reference_issuer")
  private String reference_issuer = null;

  @JsonProperty("beneficiary_reference")
  private String beneficiary_reference = null;

  @JsonProperty("address_1")
  private Object address_1 = null;

  @JsonProperty("address_2")
  private Object address_2 = null;

  @JsonProperty("virtual_account_ref")
  private String virtual_account_ref = null;

  /**
   * Set to \&quot;true\&quot; to use structured remittance information with a SEPA payment, or \&quot;false\&quot; to leave as unstructured.
   */
  public enum StructuredReferenceEnum {
    TRUE("true"),
    FALSE("false");

    private String value;

    StructuredReferenceEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StructuredReferenceEnum fromValue(String input) {
      for (StructuredReferenceEnum b : StructuredReferenceEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("structured_reference")
  private StructuredReferenceEnum structured_reference = null;

  @JsonProperty("entity_id")
  private String entity_id = null;

  @JsonProperty("sort_code")
  private String sort_code = null;

  /**
   * If false, then the payment is treated as domestic and uses the following payment rails dependent on the currency: EUR - SEPA GBP - FPS USD - ACH If true, the payment is treated as international and uses SWIFT. The default is Domestic.
   */
  public enum InternationalPaymentEnum {
    TRUE("true"),
    FALSE("false");

    private String value;

    InternationalPaymentEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static InternationalPaymentEnum fromValue(String input) {
      for (InternationalPaymentEnum b : InternationalPaymentEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("international_payment")
  private InternationalPaymentEnum international_payment = null;

  @JsonProperty("charging_option")
  private String charging_option = null;

  @JsonProperty("reference")
  private String reference = null;

  @JsonProperty("country_code")
  private String country_code = null;

  @JsonProperty("beneficiary")
  private String beneficiary = null;

  @JsonProperty("payment_purpose")
  private String payment_purpose = null;

  @JsonProperty("account_name")
  private String account_name = null;

  @JsonProperty("iban")
  private String iban = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("bic")
  private String bic = null;

  public VirtualaccountPaymentBody account_number(String account_number) {
    this.account_number = account_number;
    return this;
  }

   /**
   * UK account number for sending and recieving payments.
   * @return account_number
  **/
  public String getAccountNumber() {
    return account_number;
  }

  public void setAccountNumber(String account_number) {
    this.account_number = account_number;
  }

  public VirtualaccountPaymentBody amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Maximum limit amount for the corporate. Decimal separator \&quot;.\&quot; (point). Thousand separator; none.
   * @return amount
  **/
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public VirtualaccountPaymentBody reference_issuer(String reference_issuer) {
    this.reference_issuer = reference_issuer;
    return this;
  }

   /**
   * Format of the structured reference. Default ISO.
   * @return reference_issuer
  **/
  public String getReferenceIssuer() {
    return reference_issuer;
  }

  public void setReferenceIssuer(String reference_issuer) {
    this.reference_issuer = reference_issuer;
  }

  public VirtualaccountPaymentBody beneficiary_reference(String beneficiary_reference) {
    this.beneficiary_reference = beneficiary_reference;
    return this;
  }

   /**
   * Communication text linked to the payment. Note that for SEPA payments, maximum length is 40 characters, or 35 for a structured reference.
   * @return beneficiary_reference
  **/
  public String getBeneficiaryReference() {
    return beneficiary_reference;
  }

  public void setBeneficiaryReference(String beneficiary_reference) {
    this.beneficiary_reference = beneficiary_reference;
  }

  public VirtualaccountPaymentBody address_1(Object address_1) {
    this.address_1 = address_1;
    return this;
  }

   /**
   * Get address_1
   * @return address_1
  **/
  public Object getAddress1() {
    return address_1;
  }

  public void setAddress1(Object address_1) {
    this.address_1 = address_1;
  }

  public VirtualaccountPaymentBody address_2(Object address_2) {
    this.address_2 = address_2;
    return this;
  }

   /**
   * Get address_2
   * @return address_2
  **/
  public Object getAddress2() {
    return address_2;
  }

  public void setAddress2(Object address_2) {
    this.address_2 = address_2;
  }

  public VirtualaccountPaymentBody virtual_account_ref(String virtual_account_ref) {
    this.virtual_account_ref = virtual_account_ref;
    return this;
  }

   /**
   * Reference ID of the virtual account
   * @return virtual_account_ref
  **/
  public String getVirtualAccountRef() {
    return virtual_account_ref;
  }

  public void setVirtualAccountRef(String virtual_account_ref) {
    this.virtual_account_ref = virtual_account_ref;
  }

  public VirtualaccountPaymentBody structured_reference(StructuredReferenceEnum structured_reference) {
    this.structured_reference = structured_reference;
    return this;
  }

   /**
   * Set to \&quot;true\&quot; to use structured remittance information with a SEPA payment, or \&quot;false\&quot; to leave as unstructured.
   * @return structured_reference
  **/
  public StructuredReferenceEnum getStructuredReference() {
    return structured_reference;
  }

  public void setStructuredReference(StructuredReferenceEnum structured_reference) {
    this.structured_reference = structured_reference;
  }

  public VirtualaccountPaymentBody entity_id(String entity_id) {
    this.entity_id = entity_id;
    return this;
  }

   /**
   * Identity of the client
   * @return entity_id
  **/
  public String getEntityId() {
    return entity_id;
  }

  public void setEntityId(String entity_id) {
    this.entity_id = entity_id;
  }

  public VirtualaccountPaymentBody sort_code(String sort_code) {
    this.sort_code = sort_code;
    return this;
  }

   /**
   * UK sort code for sending and recieving payments.
   * @return sort_code
  **/
  public String getSortCode() {
    return sort_code;
  }

  public void setSortCode(String sort_code) {
    this.sort_code = sort_code;
  }

  public VirtualaccountPaymentBody international_payment(InternationalPaymentEnum international_payment) {
    this.international_payment = international_payment;
    return this;
  }

   /**
   * If false, then the payment is treated as domestic and uses the following payment rails dependent on the currency: EUR - SEPA GBP - FPS USD - ACH If true, the payment is treated as international and uses SWIFT. The default is Domestic.
   * @return international_payment
  **/
  public InternationalPaymentEnum getInternationalPayment() {
    return international_payment;
  }

  public void setInternationalPayment(InternationalPaymentEnum international_payment) {
    this.international_payment = international_payment;
  }

  public VirtualaccountPaymentBody charging_option(String charging_option) {
    this.charging_option = charging_option;
    return this;
  }

   /**
   * Default - SHA - SHA - BEN - OUR If international_payment is not true then this value will be ignored
   * @return charging_option
  **/
  public String getChargingOption() {
    return charging_option;
  }

  public void setChargingOption(String charging_option) {
    this.charging_option = charging_option;
  }

  public VirtualaccountPaymentBody reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Reference text linked to the payment.
   * @return reference
  **/
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public VirtualaccountPaymentBody country_code(String country_code) {
    this.country_code = country_code;
    return this;
  }

   /**
   * Two-character ISO alphabetic code. Examples: FR / GB. If left blank, the country of the client will be used.
   * @return country_code
  **/
  public String getCountryCode() {
    return country_code;
  }

  public void setCountryCode(String country_code) {
    this.country_code = country_code;
  }

  public VirtualaccountPaymentBody beneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
    return this;
  }

   /**
   * The beneficiary account holder.
   * @return beneficiary
  **/
  public String getBeneficiary() {
    return beneficiary;
  }

  public void setBeneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
  }

  public VirtualaccountPaymentBody payment_purpose(String payment_purpose) {
    this.payment_purpose = payment_purpose;
    return this;
  }

   /**
   * String reporesenting the purpose of the payment
   * @return payment_purpose
  **/
  public String getPaymentPurpose() {
    return payment_purpose;
  }

  public void setPaymentPurpose(String payment_purpose) {
    this.payment_purpose = payment_purpose;
  }

  public VirtualaccountPaymentBody account_name(String account_name) {
    this.account_name = account_name;
    return this;
  }

   /**
   * Concatenated name of the account holder. Generated from First and Last name of the account holder. This will be included in outbound payments instruction.
   * @return account_name
  **/
  public String getAccountName() {
    return account_name;
  }

  public void setAccountName(String account_name) {
    this.account_name = account_name;
  }

  public VirtualaccountPaymentBody iban(String iban) {
    this.iban = iban;
    return this;
  }

   /**
   * The International Bank Account Number.
   * @return iban
  **/
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }

  public VirtualaccountPaymentBody currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency. ISO 3 characters code.
   * @return currency
  **/
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public VirtualaccountPaymentBody bic(String bic) {
    this.bic = bic;
    return this;
  }

   /**
   * The BIC code of the Bank where the account is held.
   * @return bic
  **/
  public String getBic() {
    return bic;
  }

  public void setBic(String bic) {
    this.bic = bic;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualaccountPaymentBody virtualaccount_payment_body = (VirtualaccountPaymentBody) o;
    return Objects.equals(this.account_number, virtualaccount_payment_body.account_number) &&
        Objects.equals(this.amount, virtualaccount_payment_body.amount) &&
        Objects.equals(this.reference_issuer, virtualaccount_payment_body.reference_issuer) &&
        Objects.equals(this.beneficiary_reference, virtualaccount_payment_body.beneficiary_reference) &&
        Objects.equals(this.address_1, virtualaccount_payment_body.address_1) &&
        Objects.equals(this.address_2, virtualaccount_payment_body.address_2) &&
        Objects.equals(this.virtual_account_ref, virtualaccount_payment_body.virtual_account_ref) &&
        Objects.equals(this.structured_reference, virtualaccount_payment_body.structured_reference) &&
        Objects.equals(this.entity_id, virtualaccount_payment_body.entity_id) &&
        Objects.equals(this.sort_code, virtualaccount_payment_body.sort_code) &&
        Objects.equals(this.international_payment, virtualaccount_payment_body.international_payment) &&
        Objects.equals(this.charging_option, virtualaccount_payment_body.charging_option) &&
        Objects.equals(this.reference, virtualaccount_payment_body.reference) &&
        Objects.equals(this.country_code, virtualaccount_payment_body.country_code) &&
        Objects.equals(this.beneficiary, virtualaccount_payment_body.beneficiary) &&
        Objects.equals(this.payment_purpose, virtualaccount_payment_body.payment_purpose) &&
        Objects.equals(this.account_name, virtualaccount_payment_body.account_name) &&
        Objects.equals(this.iban, virtualaccount_payment_body.iban) &&
        Objects.equals(this.currency, virtualaccount_payment_body.currency) &&
        Objects.equals(this.bic, virtualaccount_payment_body.bic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account_number, amount, reference_issuer, beneficiary_reference, address_1, address_2, virtual_account_ref, structured_reference, entity_id, sort_code, international_payment, charging_option, reference, country_code, beneficiary, payment_purpose, account_name, iban, currency, bic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualaccountPaymentBody {\n");
    
    sb.append("    account_number: ").append(toIndentedString(account_number)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    reference_issuer: ").append(toIndentedString(reference_issuer)).append("\n");
    sb.append("    beneficiary_reference: ").append(toIndentedString(beneficiary_reference)).append("\n");
    sb.append("    address_1: ").append(toIndentedString(address_1)).append("\n");
    sb.append("    address_2: ").append(toIndentedString(address_2)).append("\n");
    sb.append("    virtual_account_ref: ").append(toIndentedString(virtual_account_ref)).append("\n");
    sb.append("    structured_reference: ").append(toIndentedString(structured_reference)).append("\n");
    sb.append("    entity_id: ").append(toIndentedString(entity_id)).append("\n");
    sb.append("    sort_code: ").append(toIndentedString(sort_code)).append("\n");
    sb.append("    international_payment: ").append(toIndentedString(international_payment)).append("\n");
    sb.append("    charging_option: ").append(toIndentedString(charging_option)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    country_code: ").append(toIndentedString(country_code)).append("\n");
    sb.append("    beneficiary: ").append(toIndentedString(beneficiary)).append("\n");
    sb.append("    payment_purpose: ").append(toIndentedString(payment_purpose)).append("\n");
    sb.append("    account_name: ").append(toIndentedString(account_name)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
