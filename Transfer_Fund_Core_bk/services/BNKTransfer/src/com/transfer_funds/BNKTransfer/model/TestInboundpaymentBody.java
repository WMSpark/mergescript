/*
 * Bankable API
 * Bankable API description
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transfer_funds.BNKTransfer.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
/**
 * TestInboundpaymentBody
 */

public class TestInboundpaymentBody {
  @JsonProperty("reference")
  private String reference = null;

  @JsonProperty("amount")
  private String amount = null;

  @JsonProperty("iban")
  private String iban = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("entity_id")
  private String entity_id = null;

  public TestInboundpaymentBody reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Reference of the inbound payment.
   * @return reference
  **/
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public TestInboundpaymentBody amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Maximum limit amount for the corporate. Decimal separator \&quot;.\&quot; (point). Thousand separator; none.
   * @return amount
  **/
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public TestInboundpaymentBody iban(String iban) {
    this.iban = iban;
    return this;
  }

   /**
   * The International Bank Account Number.
   * @return iban
  **/
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }

  public TestInboundpaymentBody currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Currency. ISO 3 characters code.
   * @return currency
  **/
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public TestInboundpaymentBody entity_id(String entity_id) {
    this.entity_id = entity_id;
    return this;
  }

   /**
   * Identity of the client
   * @return entity_id
  **/
  public String getEntityId() {
    return entity_id;
  }

  public void setEntityId(String entity_id) {
    this.entity_id = entity_id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestInboundpaymentBody test_inboundpayment_body = (TestInboundpaymentBody) o;
    return Objects.equals(this.reference, test_inboundpayment_body.reference) &&
        Objects.equals(this.amount, test_inboundpayment_body.amount) &&
        Objects.equals(this.iban, test_inboundpayment_body.iban) &&
        Objects.equals(this.currency, test_inboundpayment_body.currency) &&
        Objects.equals(this.entity_id, test_inboundpayment_body.entity_id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reference, amount, iban, currency, entity_id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestInboundpaymentBody {\n");
    
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    entity_id: ").append(toIndentedString(entity_id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
